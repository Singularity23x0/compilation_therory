
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEleft+-MTX_SUMMTX_DIFFERENCEleft*/MTX_PRODUCTMTX_QUOTIENTrightUMINUSleftTRANSPOSEADD BREAK CONT DIVIDE ELSE EQUAL EYE FLOAT FOR ID IF INT LARGER_OR_EQUAL MTX_DIFFERENCE MTX_PRODUCT MTX_QUOTIENT MTX_SUM MULTIPLY NOT_EQUAL ONES PRINT RETURN SMALLER_OR_EQUAL STRING SUBTRACT TRANSPOSE WHILE ZEROSprogram : segmentprogram : segment : group segmentsegment : groupline : expression ';' line : ';' block : '{' segment '}'for : FOR ID '=' range group range : arithmetic_expression ':' arithmetic_expression while : WHILE '(' logical_expression ')' groupif : IF '(' logical_expression ')' group %prec IFXif : IF '(' logical_expression ')' group ELSE groupgroup : if\n    | while\n    | for\n    | line\n    | blocksingle_value : IDsingle_value : FLOATsingle_value : INTsingle_value : STRINGsingle_value : matrix_definition select_element : matrix_definition matrix_row select_element : ID matrix_row select_element : '(' arithmetic_expression ')' matrix_rowmatrix_definition : '[' matrix_definition_inside ']' matrix_definition : matrix_gen_func matrix_definition_inside : matrix_row ',' matrix_definition_insidematrix_definition_inside : matrix_row  matrix_row : '[' vector ']'  vector : arithmetic_expression ',' vector vector : arithmetic_expression matrix_gen_func : func_name '(' arithmetic_expression ')'  func_name : EYE\n    | ONES\n    | ZEROS arithmetic_expression : arithmetic_expression '+' arithmetic_expressionarithmetic_expression : arithmetic_expression '-' arithmetic_expressionarithmetic_expression : arithmetic_expression '*' arithmetic_expressionarithmetic_expression : arithmetic_expression '/' arithmetic_expressionarithmetic_expression : arithmetic_expression MTX_SUM arithmetic_expressionarithmetic_expression : arithmetic_expression MTX_DIFFERENCE arithmetic_expressionarithmetic_expression : arithmetic_expression MTX_PRODUCT  arithmetic_expressionarithmetic_expression : arithmetic_expression MTX_QUOTIENT  arithmetic_expressionarithmetic_expression : single_valuearithmetic_expression : arithmetic_expression TRANSPOSE arithmetic_expression : '-' arithmetic_expression %prec UMINUS arithmetic_expression : '(' arithmetic_expression ')' expression : assignment\n    | print\n    | return expression : BREAKexpression : CONT logical_expression : arithmetic_expression comparison_operator arithmetic_expressioncomparison_operator : '<'\n    | '>'\n    | EQUAL\n    | NOT_EQUAL\n    | SMALLER_OR_EQUAL\n    | LARGER_OR_EQUALassignment_operator : '='\n    | ADD\n    | SUBTRACT\n    | MULTIPLY\n    | DIVIDE assignment : ID assignment_operator arithmetic_expressionassignment : select_element assignment_operator arithmetic_expressionassignment : select_element assignment_operator matrix_row print : PRINT vector return : RETURN arithmetic_expression  return : RETURN "
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,15,32,53,81,114,116,117,121,],[-2,0,-1,-4,-13,-14,-15,-16,-17,-6,-3,-5,-7,-11,-10,-8,-12,]),'IF':([0,3,4,5,6,7,8,15,16,27,37,38,39,40,41,42,53,75,76,81,86,89,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,119,120,121,],[9,9,-13,-14,-15,-16,-17,-6,9,-27,-45,-18,-19,-20,-21,-22,-5,-46,-47,-7,-26,9,-48,-37,-38,-39,-40,-41,-42,-43,-44,9,9,-33,-11,-10,-8,9,-9,-12,]),'WHILE':([0,3,4,5,6,7,8,15,16,27,37,38,39,40,41,42,53,75,76,81,86,89,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,119,120,121,],[11,11,-13,-14,-15,-16,-17,-6,11,-27,-45,-18,-19,-20,-21,-22,-5,-46,-47,-7,-26,11,-48,-37,-38,-39,-40,-41,-42,-43,-44,11,11,-33,-11,-10,-8,11,-9,-12,]),'FOR':([0,3,4,5,6,7,8,15,16,27,37,38,39,40,41,42,53,75,76,81,86,89,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,119,120,121,],[12,12,-13,-14,-15,-16,-17,-6,12,-27,-45,-18,-19,-20,-21,-22,-5,-46,-47,-7,-26,12,-48,-37,-38,-39,-40,-41,-42,-43,-44,12,12,-33,-11,-10,-8,12,-9,-12,]),';':([0,3,4,5,6,7,8,14,15,16,17,18,19,20,21,24,27,37,38,39,40,41,42,53,56,57,58,75,76,79,81,82,83,86,89,97,99,100,101,102,103,104,105,106,107,108,110,111,113,114,116,117,119,120,121,],[15,15,-13,-14,-15,-16,-17,53,-6,15,-49,-50,-51,-52,-53,-71,-27,-45,-18,-19,-20,-21,-22,-5,-69,-32,-70,-46,-47,-66,-7,-67,-68,-26,15,-48,-37,-38,-39,-40,-41,-42,-43,-44,15,15,-30,-31,-33,-11,-10,-8,15,-9,-12,]),'{':([0,3,4,5,6,7,8,15,16,27,37,38,39,40,41,42,53,75,76,81,86,89,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,119,120,121,],[16,16,-13,-14,-15,-16,-17,-6,16,-27,-45,-18,-19,-20,-21,-22,-5,-46,-47,-7,-26,16,-48,-37,-38,-39,-40,-41,-42,-43,-44,16,16,-33,-11,-10,-8,16,-9,-12,]),'BREAK':([0,3,4,5,6,7,8,15,16,27,37,38,39,40,41,42,53,75,76,81,86,89,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,119,120,121,],[20,20,-13,-14,-15,-16,-17,-6,20,-27,-45,-18,-19,-20,-21,-22,-5,-46,-47,-7,-26,20,-48,-37,-38,-39,-40,-41,-42,-43,-44,20,20,-33,-11,-10,-8,20,-9,-12,]),'CONT':([0,3,4,5,6,7,8,15,16,27,37,38,39,40,41,42,53,75,76,81,86,89,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,119,120,121,],[21,21,-13,-14,-15,-16,-17,-6,21,-27,-45,-18,-19,-20,-21,-22,-5,-46,-47,-7,-26,21,-48,-37,-38,-39,-40,-41,-42,-43,-44,21,21,-33,-11,-10,-8,21,-9,-12,]),'ID':([0,3,4,5,6,7,8,10,12,15,16,23,24,27,33,34,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,55,62,67,68,69,70,71,72,73,74,75,76,78,81,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,118,119,120,121,],[13,13,-13,-14,-15,-16,-17,38,44,-6,13,38,38,-27,38,38,38,-45,-18,-19,-20,-21,-22,38,38,-61,-62,-63,-64,-65,38,-5,38,38,38,38,38,38,38,38,38,38,-46,-47,38,-7,38,38,-26,13,38,-55,-56,-57,-58,-59,-60,-48,-37,-38,-39,-40,-41,-42,-43,-44,13,13,-33,-11,-10,-8,38,13,-9,-12,]),'PRINT':([0,3,4,5,6,7,8,15,16,27,37,38,39,40,41,42,53,75,76,81,86,89,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,119,120,121,],[23,23,-13,-14,-15,-16,-17,-6,23,-27,-45,-18,-19,-20,-21,-22,-5,-46,-47,-7,-26,23,-48,-37,-38,-39,-40,-41,-42,-43,-44,23,23,-33,-11,-10,-8,23,-9,-12,]),'RETURN':([0,3,4,5,6,7,8,15,16,27,37,38,39,40,41,42,53,75,76,81,86,89,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,119,120,121,],[24,24,-13,-14,-15,-16,-17,-6,24,-27,-45,-18,-19,-20,-21,-22,-5,-46,-47,-7,-26,24,-48,-37,-38,-39,-40,-41,-42,-43,-44,24,24,-33,-11,-10,-8,24,-9,-12,]),'(':([0,3,4,5,6,7,8,9,10,11,15,16,23,24,27,28,29,30,31,33,34,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,55,62,67,68,69,70,71,72,73,74,75,76,78,81,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,118,119,120,121,],[10,10,-13,-14,-15,-16,-17,33,34,43,-6,10,34,34,-27,62,-34,-35,-36,34,34,34,-45,-18,-19,-20,-21,-22,34,34,-61,-62,-63,-64,-65,34,-5,34,34,34,34,34,34,34,34,34,34,-46,-47,34,-7,34,34,-26,10,34,-55,-56,-57,-58,-59,-60,-48,-37,-38,-39,-40,-41,-42,-43,-44,10,10,-33,-11,-10,-8,34,10,-9,-12,]),'[':([0,3,4,5,6,7,8,10,13,15,16,23,24,25,26,27,33,34,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,55,62,66,67,68,69,70,71,72,73,74,75,76,78,81,84,85,86,87,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,118,119,120,121,],[26,26,-13,-14,-15,-16,-17,26,52,-6,26,26,26,52,52,-27,26,26,26,-45,-18,-19,-20,-21,-22,26,26,-61,-62,-63,-64,-65,26,-5,84,26,52,26,26,26,26,26,26,26,26,-46,-47,26,-7,84,26,-26,52,26,26,-55,-56,-57,-58,-59,-60,-48,-37,-38,-39,-40,-41,-42,-43,-44,26,26,-33,-11,-10,-8,26,26,-9,-12,]),'EYE':([0,3,4,5,6,7,8,10,15,16,23,24,27,33,34,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,55,62,67,68,69,70,71,72,73,74,75,76,78,81,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,118,119,120,121,],[29,29,-13,-14,-15,-16,-17,29,-6,29,29,29,-27,29,29,29,-45,-18,-19,-20,-21,-22,29,29,-61,-62,-63,-64,-65,29,-5,29,29,29,29,29,29,29,29,29,29,-46,-47,29,-7,29,29,-26,29,29,-55,-56,-57,-58,-59,-60,-48,-37,-38,-39,-40,-41,-42,-43,-44,29,29,-33,-11,-10,-8,29,29,-9,-12,]),'ONES':([0,3,4,5,6,7,8,10,15,16,23,24,27,33,34,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,55,62,67,68,69,70,71,72,73,74,75,76,78,81,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,118,119,120,121,],[30,30,-13,-14,-15,-16,-17,30,-6,30,30,30,-27,30,30,30,-45,-18,-19,-20,-21,-22,30,30,-61,-62,-63,-64,-65,30,-5,30,30,30,30,30,30,30,30,30,30,-46,-47,30,-7,30,30,-26,30,30,-55,-56,-57,-58,-59,-60,-48,-37,-38,-39,-40,-41,-42,-43,-44,30,30,-33,-11,-10,-8,30,30,-9,-12,]),'ZEROS':([0,3,4,5,6,7,8,10,15,16,23,24,27,33,34,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,53,55,62,67,68,69,70,71,72,73,74,75,76,78,81,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,113,114,116,117,118,119,120,121,],[31,31,-13,-14,-15,-16,-17,31,-6,31,31,31,-27,31,31,31,-45,-18,-19,-20,-21,-22,31,31,-61,-62,-63,-64,-65,31,-5,31,31,31,31,31,31,31,31,31,31,-46,-47,31,-7,31,31,-26,31,31,-55,-56,-57,-58,-59,-60,-48,-37,-38,-39,-40,-41,-42,-43,-44,31,31,-33,-11,-10,-8,31,31,-9,-12,]),'}':([3,4,5,6,7,8,15,32,53,54,81,114,116,117,121,],[-4,-13,-14,-15,-16,-17,-6,-3,-5,81,-7,-11,-10,-8,-12,]),'ELSE':([4,5,6,7,8,15,53,81,114,116,117,121,],[-13,-14,-15,-16,-17,-6,-5,-7,119,-10,-8,-12,]),'-':([10,23,24,27,33,34,35,36,37,38,39,40,41,42,43,45,47,48,49,50,51,52,55,57,58,62,64,65,67,68,69,70,71,72,73,74,75,76,78,79,82,84,85,86,88,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,113,115,118,120,],[36,36,36,-27,36,36,68,36,-45,-18,-19,-20,-21,-22,36,36,-61,-62,-63,-64,-65,36,36,68,68,36,68,68,36,36,36,36,36,36,36,36,-46,-47,36,68,68,36,36,-26,68,36,-55,-56,-57,-58,-59,-60,-48,-37,-38,-39,-40,-41,-42,-43,-44,68,-33,68,36,68,]),'FLOAT':([10,23,24,33,34,36,43,45,47,48,49,50,51,52,55,62,67,68,69,70,71,72,73,74,78,84,85,90,91,92,93,94,95,96,118,],[39,39,39,39,39,39,39,39,-61,-62,-63,-64,-65,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-55,-56,-57,-58,-59,-60,39,]),'INT':([10,23,24,33,34,36,43,45,47,48,49,50,51,52,55,62,67,68,69,70,71,72,73,74,78,84,85,90,91,92,93,94,95,96,118,],[40,40,40,40,40,40,40,40,-61,-62,-63,-64,-65,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-55,-56,-57,-58,-59,-60,40,]),'STRING':([10,23,24,33,34,36,43,45,47,48,49,50,51,52,55,62,67,68,69,70,71,72,73,74,78,84,85,90,91,92,93,94,95,96,118,],[41,41,41,41,41,41,41,41,-61,-62,-63,-64,-65,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-55,-56,-57,-58,-59,-60,41,]),'=':([13,22,44,46,59,98,110,],[47,47,78,-24,-23,-25,-30,]),'ADD':([13,22,46,59,98,110,],[48,48,-24,-23,-25,-30,]),'SUBTRACT':([13,22,46,59,98,110,],[49,49,-24,-23,-25,-30,]),'MULTIPLY':([13,22,46,59,98,110,],[50,50,-24,-23,-25,-30,]),'DIVIDE':([13,22,46,59,98,110,],[51,51,-24,-23,-25,-30,]),')':([27,35,37,38,39,40,41,42,63,65,75,76,77,86,88,97,99,100,101,102,103,104,105,106,113,115,],[-27,66,-45,-18,-19,-20,-21,-22,89,97,-46,-47,107,-26,113,-48,-37,-38,-39,-40,-41,-42,-43,-44,-33,-54,]),'+':([27,35,37,38,39,40,41,42,57,58,64,65,75,76,79,82,86,88,97,99,100,101,102,103,104,105,106,109,113,115,120,],[-27,67,-45,-18,-19,-20,-21,-22,67,67,67,67,-46,-47,67,67,-26,67,-48,-37,-38,-39,-40,-41,-42,-43,-44,67,-33,67,67,]),'*':([27,35,37,38,39,40,41,42,57,58,64,65,75,76,79,82,86,88,97,99,100,101,102,103,104,105,106,109,113,115,120,],[-27,69,-45,-18,-19,-20,-21,-22,69,69,69,69,-46,-47,69,69,-26,69,-48,69,69,-39,-40,69,69,-43,-44,69,-33,69,69,]),'/':([27,35,37,38,39,40,41,42,57,58,64,65,75,76,79,82,86,88,97,99,100,101,102,103,104,105,106,109,113,115,120,],[-27,70,-45,-18,-19,-20,-21,-22,70,70,70,70,-46,-47,70,70,-26,70,-48,70,70,-39,-40,70,70,-43,-44,70,-33,70,70,]),'MTX_SUM':([27,35,37,38,39,40,41,42,57,58,64,65,75,76,79,82,86,88,97,99,100,101,102,103,104,105,106,109,113,115,120,],[-27,71,-45,-18,-19,-20,-21,-22,71,71,71,71,-46,-47,71,71,-26,71,-48,-37,-38,-39,-40,-41,-42,-43,-44,71,-33,71,71,]),'MTX_DIFFERENCE':([27,35,37,38,39,40,41,42,57,58,64,65,75,76,79,82,86,88,97,99,100,101,102,103,104,105,106,109,113,115,120,],[-27,72,-45,-18,-19,-20,-21,-22,72,72,72,72,-46,-47,72,72,-26,72,-48,-37,-38,-39,-40,-41,-42,-43,-44,72,-33,72,72,]),'MTX_PRODUCT':([27,35,37,38,39,40,41,42,57,58,64,65,75,76,79,82,86,88,97,99,100,101,102,103,104,105,106,109,113,115,120,],[-27,73,-45,-18,-19,-20,-21,-22,73,73,73,73,-46,-47,73,73,-26,73,-48,73,73,-39,-40,73,73,-43,-44,73,-33,73,73,]),'MTX_QUOTIENT':([27,35,37,38,39,40,41,42,57,58,64,65,75,76,79,82,86,88,97,99,100,101,102,103,104,105,106,109,113,115,120,],[-27,74,-45,-18,-19,-20,-21,-22,74,74,74,74,-46,-47,74,74,-26,74,-48,74,74,-39,-40,74,74,-43,-44,74,-33,74,74,]),'TRANSPOSE':([27,35,37,38,39,40,41,42,57,58,64,65,75,76,79,82,86,88,97,99,100,101,102,103,104,105,106,109,113,115,120,],[-27,75,-45,-18,-19,-20,-21,-22,75,75,75,75,-46,75,75,75,-26,75,-48,75,75,75,75,75,75,75,75,75,-33,75,75,]),',':([27,37,38,39,40,41,42,57,61,75,76,86,97,99,100,101,102,103,104,105,106,110,113,],[-27,-45,-18,-19,-20,-21,-22,85,87,-46,-47,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,-30,-33,]),'<':([27,37,38,39,40,41,42,64,75,76,86,97,99,100,101,102,103,104,105,106,113,],[-27,-45,-18,-19,-20,-21,-22,91,-46,-47,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,-33,]),'>':([27,37,38,39,40,41,42,64,75,76,86,97,99,100,101,102,103,104,105,106,113,],[-27,-45,-18,-19,-20,-21,-22,92,-46,-47,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,-33,]),'EQUAL':([27,37,38,39,40,41,42,64,75,76,86,97,99,100,101,102,103,104,105,106,113,],[-27,-45,-18,-19,-20,-21,-22,93,-46,-47,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,-33,]),'NOT_EQUAL':([27,37,38,39,40,41,42,64,75,76,86,97,99,100,101,102,103,104,105,106,113,],[-27,-45,-18,-19,-20,-21,-22,94,-46,-47,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,-33,]),'SMALLER_OR_EQUAL':([27,37,38,39,40,41,42,64,75,76,86,97,99,100,101,102,103,104,105,106,113,],[-27,-45,-18,-19,-20,-21,-22,95,-46,-47,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,-33,]),'LARGER_OR_EQUAL':([27,37,38,39,40,41,42,64,75,76,86,97,99,100,101,102,103,104,105,106,113,],[-27,-45,-18,-19,-20,-21,-22,96,-46,-47,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,-33,]),']':([27,37,38,39,40,41,42,57,60,61,75,76,80,86,97,99,100,101,102,103,104,105,106,110,111,112,113,],[-27,-45,-18,-19,-20,-21,-22,-32,86,-29,-46,-47,110,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,-30,-31,-28,-33,]),':':([27,37,38,39,40,41,42,75,76,86,97,99,100,101,102,103,104,105,106,109,113,],[-27,-45,-18,-19,-20,-21,-22,-46,-47,-26,-48,-37,-38,-39,-40,-41,-42,-43,-44,118,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'segment':([0,3,16,],[2,32,54,]),'group':([0,3,16,89,107,108,119,],[3,3,3,114,116,117,121,]),'if':([0,3,16,89,107,108,119,],[4,4,4,4,4,4,4,]),'while':([0,3,16,89,107,108,119,],[5,5,5,5,5,5,5,]),'for':([0,3,16,89,107,108,119,],[6,6,6,6,6,6,6,]),'line':([0,3,16,89,107,108,119,],[7,7,7,7,7,7,7,]),'block':([0,3,16,89,107,108,119,],[8,8,8,8,8,8,8,]),'expression':([0,3,16,89,107,108,119,],[14,14,14,14,14,14,14,]),'assignment':([0,3,16,89,107,108,119,],[17,17,17,17,17,17,17,]),'print':([0,3,16,89,107,108,119,],[18,18,18,18,18,18,18,]),'return':([0,3,16,89,107,108,119,],[19,19,19,19,19,19,19,]),'select_element':([0,3,16,89,107,108,119,],[22,22,22,22,22,22,22,]),'matrix_definition':([0,3,10,16,23,24,33,34,36,43,45,52,55,62,67,68,69,70,71,72,73,74,78,84,85,89,90,107,108,118,119,],[25,25,42,25,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,25,42,25,25,42,25,]),'matrix_gen_func':([0,3,10,16,23,24,33,34,36,43,45,52,55,62,67,68,69,70,71,72,73,74,78,84,85,89,90,107,108,118,119,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'func_name':([0,3,10,16,23,24,33,34,36,43,45,52,55,62,67,68,69,70,71,72,73,74,78,84,85,89,90,107,108,118,119,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'arithmetic_expression':([10,23,24,33,34,36,43,45,52,55,62,67,68,69,70,71,72,73,74,78,84,85,90,118,],[35,57,58,64,65,76,64,79,57,82,88,99,100,101,102,103,104,105,106,109,57,57,115,120,]),'single_value':([10,23,24,33,34,36,43,45,52,55,62,67,68,69,70,71,72,73,74,78,84,85,90,118,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'assignment_operator':([13,22,],[45,55,]),'matrix_row':([13,25,26,55,66,84,87,],[46,59,61,83,98,61,61,]),'vector':([23,52,84,85,],[56,80,80,111,]),'matrix_definition_inside':([26,84,87,],[60,60,112,]),'logical_expression':([33,43,],[63,77,]),'comparison_operator':([64,],[90,]),'range':([78,],[108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> segment','program',1,'p_program1','grammar.py',17),
  ('program -> <empty>','program',0,'p_program2','grammar.py',23),
  ('segment -> group segment','segment',2,'p_segment1','grammar.py',28),
  ('segment -> group','segment',1,'p_segment2','grammar.py',33),
  ('line -> expression ;','line',2,'p_line1','grammar.py',38),
  ('line -> ;','line',1,'p_line2','grammar.py',43),
  ('block -> { segment }','block',3,'p_block','grammar.py',48),
  ('for -> FOR ID = range group','for',5,'p_for','grammar.py',53),
  ('range -> arithmetic_expression : arithmetic_expression','range',3,'p_range','grammar.py',58),
  ('while -> WHILE ( logical_expression ) group','while',5,'p_while','grammar.py',63),
  ('if -> IF ( logical_expression ) group','if',5,'p_if1','grammar.py',68),
  ('if -> IF ( logical_expression ) group ELSE group','if',7,'p_if2','grammar.py',73),
  ('group -> if','group',1,'p_group','grammar.py',78),
  ('group -> while','group',1,'p_group','grammar.py',79),
  ('group -> for','group',1,'p_group','grammar.py',80),
  ('group -> line','group',1,'p_group','grammar.py',81),
  ('group -> block','group',1,'p_group','grammar.py',82),
  ('single_value -> ID','single_value',1,'p_single_valueID','grammar.py',87),
  ('single_value -> FLOAT','single_value',1,'p_single_valueFLOAT','grammar.py',92),
  ('single_value -> INT','single_value',1,'p_single_valueINT','grammar.py',97),
  ('single_value -> STRING','single_value',1,'p_single_valueSTRING','grammar.py',102),
  ('single_value -> matrix_definition','single_value',1,'p_single_valueMATRIX','grammar.py',107),
  ('select_element -> matrix_definition matrix_row','select_element',2,'p_select_elementMD','grammar.py',112),
  ('select_element -> ID matrix_row','select_element',2,'p_select_elementID','grammar.py',122),
  ('select_element -> ( arithmetic_expression ) matrix_row','select_element',4,'p_select_elementBAB','grammar.py',132),
  ('matrix_definition -> [ matrix_definition_inside ]','matrix_definition',3,'p_matrix_definition1','grammar.py',142),
  ('matrix_definition -> matrix_gen_func','matrix_definition',1,'p_matrix_definition2','grammar.py',147),
  ('matrix_definition_inside -> matrix_row , matrix_definition_inside','matrix_definition_inside',3,'p_matrix_definition_inside1','grammar.py',152),
  ('matrix_definition_inside -> matrix_row','matrix_definition_inside',1,'p_matrix_definition_inside2','grammar.py',157),
  ('matrix_row -> [ vector ]','matrix_row',3,'p_matrix_row','grammar.py',162),
  ('vector -> arithmetic_expression , vector','vector',3,'p_vector1','grammar.py',167),
  ('vector -> arithmetic_expression','vector',1,'p_vector2','grammar.py',172),
  ('matrix_gen_func -> func_name ( arithmetic_expression )','matrix_gen_func',4,'p_matrix_gen_func','grammar.py',177),
  ('func_name -> EYE','func_name',1,'p_func_name','grammar.py',182),
  ('func_name -> ONES','func_name',1,'p_func_name','grammar.py',183),
  ('func_name -> ZEROS','func_name',1,'p_func_name','grammar.py',184),
  ('arithmetic_expression -> arithmetic_expression + arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression1p','grammar.py',189),
  ('arithmetic_expression -> arithmetic_expression - arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression1m','grammar.py',194),
  ('arithmetic_expression -> arithmetic_expression * arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression1st','grammar.py',199),
  ('arithmetic_expression -> arithmetic_expression / arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression1sl','grammar.py',204),
  ('arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression1','grammar.py',209),
  ('arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression1MM','grammar.py',214),
  ('arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression1mst','grammar.py',219),
  ('arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression1msl','grammar.py',224),
  ('arithmetic_expression -> single_value','arithmetic_expression',1,'p_arithmetic_expression2','grammar.py',229),
  ('arithmetic_expression -> arithmetic_expression TRANSPOSE','arithmetic_expression',2,'p_arithmetic_expression3','grammar.py',234),
  ('arithmetic_expression -> - arithmetic_expression','arithmetic_expression',2,'p_arithmetic_expression4','grammar.py',239),
  ('arithmetic_expression -> ( arithmetic_expression )','arithmetic_expression',3,'p_arithmetic_expression5','grammar.py',244),
  ('expression -> assignment','expression',1,'p_expression1','grammar.py',249),
  ('expression -> print','expression',1,'p_expression1','grammar.py',250),
  ('expression -> return','expression',1,'p_expression1','grammar.py',251),
  ('expression -> BREAK','expression',1,'p_expression2','grammar.py',256),
  ('expression -> CONT','expression',1,'p_expression3','grammar.py',261),
  ('logical_expression -> arithmetic_expression comparison_operator arithmetic_expression','logical_expression',3,'p_logical_expression','grammar.py',266),
  ('comparison_operator -> <','comparison_operator',1,'p_comparison_operator','grammar.py',271),
  ('comparison_operator -> >','comparison_operator',1,'p_comparison_operator','grammar.py',272),
  ('comparison_operator -> EQUAL','comparison_operator',1,'p_comparison_operator','grammar.py',273),
  ('comparison_operator -> NOT_EQUAL','comparison_operator',1,'p_comparison_operator','grammar.py',274),
  ('comparison_operator -> SMALLER_OR_EQUAL','comparison_operator',1,'p_comparison_operator','grammar.py',275),
  ('comparison_operator -> LARGER_OR_EQUAL','comparison_operator',1,'p_comparison_operator','grammar.py',276),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','grammar.py',281),
  ('assignment_operator -> ADD','assignment_operator',1,'p_assignment_operator','grammar.py',282),
  ('assignment_operator -> SUBTRACT','assignment_operator',1,'p_assignment_operator','grammar.py',283),
  ('assignment_operator -> MULTIPLY','assignment_operator',1,'p_assignment_operator','grammar.py',284),
  ('assignment_operator -> DIVIDE','assignment_operator',1,'p_assignment_operator','grammar.py',285),
  ('assignment -> ID assignment_operator arithmetic_expression','assignment',3,'p_assignment1','grammar.py',290),
  ('assignment -> select_element assignment_operator arithmetic_expression','assignment',3,'p_assignment2','grammar.py',295),
  ('assignment -> select_element assignment_operator matrix_row','assignment',3,'p_assignment3','grammar.py',300),
  ('print -> PRINT vector','print',2,'p_print','grammar.py',305),
  ('return -> RETURN arithmetic_expression','return',2,'p_return1','grammar.py',310),
  ('return -> RETURN','return',1,'p_return2','grammar.py',315),
]
