Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> segment
Rule 2     program -> <empty>
Rule 3     segment -> group segment
Rule 4     segment -> group
Rule 5     line -> expression ;
Rule 6     line -> ;
Rule 7     block -> { segment }
Rule 8     for -> FOR ID = range group
Rule 9     range -> arithmetic_expression : arithmetic_expression
Rule 10    while -> WHILE ( logical_expression ) group
Rule 11    if -> IF ( logical_expression ) group
Rule 12    if -> IF ( logical_expression ) group ELSE group
Rule 13    group -> if
Rule 14    group -> while
Rule 15    group -> for
Rule 16    group -> line
Rule 17    group -> block
Rule 18    single_value -> ID
Rule 19    single_value -> FLOAT
Rule 20    single_value -> INT
Rule 21    single_value -> STRING
Rule 22    single_value -> matrix_definition
Rule 23    select_element -> matrix_definition matrix_row
Rule 24    select_element -> ID matrix_row
Rule 25    select_element -> ( arithmetic_expression ) matrix_row
Rule 26    matrix_definition -> [ matrix_definition_inside ]
Rule 27    matrix_definition -> matrix_gen_func
Rule 28    matrix_definition_inside -> matrix_row , matrix_definition_inside
Rule 29    matrix_definition_inside -> matrix_row
Rule 30    matrix_row -> [ vector ]
Rule 31    vector -> arithmetic_expression , vector
Rule 32    vector -> arithmetic_expression
Rule 33    matrix_gen_func -> func_name ( arithmetic_expression )
Rule 34    func_name -> EYE
Rule 35    func_name -> ONES
Rule 36    func_name -> ZEROS
Rule 37    arithmetic_expression -> arithmetic_expression + arithmetic_expression
Rule 38    arithmetic_expression -> arithmetic_expression - arithmetic_expression
Rule 39    arithmetic_expression -> arithmetic_expression * arithmetic_expression
Rule 40    arithmetic_expression -> arithmetic_expression / arithmetic_expression
Rule 41    arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression
Rule 42    arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression
Rule 43    arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression
Rule 44    arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression
Rule 45    arithmetic_expression -> single_value
Rule 46    arithmetic_expression -> arithmetic_expression TRANSPOSE
Rule 47    arithmetic_expression -> - arithmetic_expression
Rule 48    arithmetic_expression -> ( arithmetic_expression )
Rule 49    expression -> assignment
Rule 50    expression -> print
Rule 51    expression -> return
Rule 52    expression -> BREAK
Rule 53    expression -> CONT
Rule 54    logical_expression -> arithmetic_expression comparison_operator arithmetic_expression
Rule 55    comparison_operator -> <
Rule 56    comparison_operator -> >
Rule 57    comparison_operator -> EQUAL
Rule 58    comparison_operator -> NOT_EQUAL
Rule 59    comparison_operator -> SMALLER_OR_EQUAL
Rule 60    comparison_operator -> LARGER_OR_EQUAL
Rule 61    assignment_operator -> =
Rule 62    assignment_operator -> ADD
Rule 63    assignment_operator -> SUBTRACT
Rule 64    assignment_operator -> MULTIPLY
Rule 65    assignment_operator -> DIVIDE
Rule 66    assignment -> ID assignment_operator arithmetic_expression
Rule 67    assignment -> select_element assignment_operator arithmetic_expression
Rule 68    assignment -> select_element assignment_operator matrix_row
Rule 69    print -> PRINT vector
Rule 70    return -> RETURN arithmetic_expression
Rule 71    return -> RETURN

Terminals, with rules where they appear

(                    : 10 11 12 25 33 48
)                    : 10 11 12 25 33 48
*                    : 39
+                    : 37
,                    : 28 31
-                    : 38 47
/                    : 40
:                    : 9
;                    : 5 6
<                    : 55
=                    : 8 61
>                    : 56
ADD                  : 62
BREAK                : 52
CONT                 : 53
DIVIDE               : 65
ELSE                 : 12
EQUAL                : 57
EYE                  : 34
FLOAT                : 19
FOR                  : 8
ID                   : 8 18 24 66
IF                   : 11 12
INT                  : 20
LARGER_OR_EQUAL      : 60
MTX_DIFFERENCE       : 42
MTX_PRODUCT          : 43
MTX_QUOTIENT         : 44
MTX_SUM              : 41
MULTIPLY             : 64
NOT_EQUAL            : 58
ONES                 : 35
PRINT                : 69
RETURN               : 70 71
SMALLER_OR_EQUAL     : 59
STRING               : 21
SUBTRACT             : 63
TRANSPOSE            : 46
WHILE                : 10
ZEROS                : 36
[                    : 26 30
]                    : 26 30
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

arithmetic_expression : 9 9 25 31 32 33 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 46 47 48 54 54 66 67 70
assignment           : 49
assignment_operator  : 66 67 68
block                : 17
comparison_operator  : 54
expression           : 5
for                  : 15
func_name            : 33
group                : 3 4 8 10 11 12 12
if                   : 13
line                 : 16
logical_expression   : 10 11 12
matrix_definition    : 22 23
matrix_definition_inside : 26 28
matrix_gen_func      : 27
matrix_row           : 23 24 25 28 29 68
print                : 50
program              : 0
range                : 8
return               : 51
segment              : 1 3 7
select_element       : 67 68
single_value         : 45
vector               : 30 31 69
while                : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . segment
    (2) program -> .
    (3) segment -> . group segment
    (4) segment -> . group
    (13) group -> . if
    (14) group -> . while
    (15) group -> . for
    (16) group -> . line
    (17) group -> . block
    (11) if -> . IF ( logical_expression ) group
    (12) if -> . IF ( logical_expression ) group ELSE group
    (10) while -> . WHILE ( logical_expression ) group
    (8) for -> . FOR ID = range group
    (5) line -> . expression ;
    (6) line -> . ;
    (7) block -> . { segment }
    (49) expression -> . assignment
    (50) expression -> . print
    (51) expression -> . return
    (52) expression -> . BREAK
    (53) expression -> . CONT
    (66) assignment -> . ID assignment_operator arithmetic_expression
    (67) assignment -> . select_element assignment_operator arithmetic_expression
    (68) assignment -> . select_element assignment_operator matrix_row
    (69) print -> . PRINT vector
    (70) return -> . RETURN arithmetic_expression
    (71) return -> . RETURN
    (23) select_element -> . matrix_definition matrix_row
    (24) select_element -> . ID matrix_row
    (25) select_element -> . ( arithmetic_expression ) matrix_row
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    $end            reduce using rule 2 (program -> .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ;               shift and go to state 15
    {               shift and go to state 16
    BREAK           shift and go to state 20
    CONT            shift and go to state 21
    ID              shift and go to state 13
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    (               shift and go to state 10
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    program                        shift and go to state 1
    segment                        shift and go to state 2
    group                          shift and go to state 3
    if                             shift and go to state 4
    while                          shift and go to state 5
    for                            shift and go to state 6
    line                           shift and go to state 7
    block                          shift and go to state 8
    expression                     shift and go to state 14
    assignment                     shift and go to state 17
    print                          shift and go to state 18
    return                         shift and go to state 19
    select_element                 shift and go to state 22
    matrix_definition              shift and go to state 25
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (1) program -> segment .

    $end            reduce using rule 1 (program -> segment .)


state 3

    (3) segment -> group . segment
    (4) segment -> group .
    (3) segment -> . group segment
    (4) segment -> . group
    (13) group -> . if
    (14) group -> . while
    (15) group -> . for
    (16) group -> . line
    (17) group -> . block
    (11) if -> . IF ( logical_expression ) group
    (12) if -> . IF ( logical_expression ) group ELSE group
    (10) while -> . WHILE ( logical_expression ) group
    (8) for -> . FOR ID = range group
    (5) line -> . expression ;
    (6) line -> . ;
    (7) block -> . { segment }
    (49) expression -> . assignment
    (50) expression -> . print
    (51) expression -> . return
    (52) expression -> . BREAK
    (53) expression -> . CONT
    (66) assignment -> . ID assignment_operator arithmetic_expression
    (67) assignment -> . select_element assignment_operator arithmetic_expression
    (68) assignment -> . select_element assignment_operator matrix_row
    (69) print -> . PRINT vector
    (70) return -> . RETURN arithmetic_expression
    (71) return -> . RETURN
    (23) select_element -> . matrix_definition matrix_row
    (24) select_element -> . ID matrix_row
    (25) select_element -> . ( arithmetic_expression ) matrix_row
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    $end            reduce using rule 4 (segment -> group .)
    }               reduce using rule 4 (segment -> group .)
    IF              shift and go to state 9
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ;               shift and go to state 15
    {               shift and go to state 16
    BREAK           shift and go to state 20
    CONT            shift and go to state 21
    ID              shift and go to state 13
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    (               shift and go to state 10
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    group                          shift and go to state 3
    segment                        shift and go to state 32
    if                             shift and go to state 4
    while                          shift and go to state 5
    for                            shift and go to state 6
    line                           shift and go to state 7
    block                          shift and go to state 8
    expression                     shift and go to state 14
    assignment                     shift and go to state 17
    print                          shift and go to state 18
    return                         shift and go to state 19
    select_element                 shift and go to state 22
    matrix_definition              shift and go to state 25
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 4

    (13) group -> if .

    IF              reduce using rule 13 (group -> if .)
    WHILE           reduce using rule 13 (group -> if .)
    FOR             reduce using rule 13 (group -> if .)
    ;               reduce using rule 13 (group -> if .)
    {               reduce using rule 13 (group -> if .)
    BREAK           reduce using rule 13 (group -> if .)
    CONT            reduce using rule 13 (group -> if .)
    ID              reduce using rule 13 (group -> if .)
    PRINT           reduce using rule 13 (group -> if .)
    RETURN          reduce using rule 13 (group -> if .)
    (               reduce using rule 13 (group -> if .)
    [               reduce using rule 13 (group -> if .)
    EYE             reduce using rule 13 (group -> if .)
    ONES            reduce using rule 13 (group -> if .)
    ZEROS           reduce using rule 13 (group -> if .)
    $end            reduce using rule 13 (group -> if .)
    }               reduce using rule 13 (group -> if .)
    ELSE            reduce using rule 13 (group -> if .)


state 5

    (14) group -> while .

    IF              reduce using rule 14 (group -> while .)
    WHILE           reduce using rule 14 (group -> while .)
    FOR             reduce using rule 14 (group -> while .)
    ;               reduce using rule 14 (group -> while .)
    {               reduce using rule 14 (group -> while .)
    BREAK           reduce using rule 14 (group -> while .)
    CONT            reduce using rule 14 (group -> while .)
    ID              reduce using rule 14 (group -> while .)
    PRINT           reduce using rule 14 (group -> while .)
    RETURN          reduce using rule 14 (group -> while .)
    (               reduce using rule 14 (group -> while .)
    [               reduce using rule 14 (group -> while .)
    EYE             reduce using rule 14 (group -> while .)
    ONES            reduce using rule 14 (group -> while .)
    ZEROS           reduce using rule 14 (group -> while .)
    $end            reduce using rule 14 (group -> while .)
    }               reduce using rule 14 (group -> while .)
    ELSE            reduce using rule 14 (group -> while .)


state 6

    (15) group -> for .

    IF              reduce using rule 15 (group -> for .)
    WHILE           reduce using rule 15 (group -> for .)
    FOR             reduce using rule 15 (group -> for .)
    ;               reduce using rule 15 (group -> for .)
    {               reduce using rule 15 (group -> for .)
    BREAK           reduce using rule 15 (group -> for .)
    CONT            reduce using rule 15 (group -> for .)
    ID              reduce using rule 15 (group -> for .)
    PRINT           reduce using rule 15 (group -> for .)
    RETURN          reduce using rule 15 (group -> for .)
    (               reduce using rule 15 (group -> for .)
    [               reduce using rule 15 (group -> for .)
    EYE             reduce using rule 15 (group -> for .)
    ONES            reduce using rule 15 (group -> for .)
    ZEROS           reduce using rule 15 (group -> for .)
    $end            reduce using rule 15 (group -> for .)
    }               reduce using rule 15 (group -> for .)
    ELSE            reduce using rule 15 (group -> for .)


state 7

    (16) group -> line .

    IF              reduce using rule 16 (group -> line .)
    WHILE           reduce using rule 16 (group -> line .)
    FOR             reduce using rule 16 (group -> line .)
    ;               reduce using rule 16 (group -> line .)
    {               reduce using rule 16 (group -> line .)
    BREAK           reduce using rule 16 (group -> line .)
    CONT            reduce using rule 16 (group -> line .)
    ID              reduce using rule 16 (group -> line .)
    PRINT           reduce using rule 16 (group -> line .)
    RETURN          reduce using rule 16 (group -> line .)
    (               reduce using rule 16 (group -> line .)
    [               reduce using rule 16 (group -> line .)
    EYE             reduce using rule 16 (group -> line .)
    ONES            reduce using rule 16 (group -> line .)
    ZEROS           reduce using rule 16 (group -> line .)
    $end            reduce using rule 16 (group -> line .)
    }               reduce using rule 16 (group -> line .)
    ELSE            reduce using rule 16 (group -> line .)


state 8

    (17) group -> block .

    IF              reduce using rule 17 (group -> block .)
    WHILE           reduce using rule 17 (group -> block .)
    FOR             reduce using rule 17 (group -> block .)
    ;               reduce using rule 17 (group -> block .)
    {               reduce using rule 17 (group -> block .)
    BREAK           reduce using rule 17 (group -> block .)
    CONT            reduce using rule 17 (group -> block .)
    ID              reduce using rule 17 (group -> block .)
    PRINT           reduce using rule 17 (group -> block .)
    RETURN          reduce using rule 17 (group -> block .)
    (               reduce using rule 17 (group -> block .)
    [               reduce using rule 17 (group -> block .)
    EYE             reduce using rule 17 (group -> block .)
    ONES            reduce using rule 17 (group -> block .)
    ZEROS           reduce using rule 17 (group -> block .)
    $end            reduce using rule 17 (group -> block .)
    }               reduce using rule 17 (group -> block .)
    ELSE            reduce using rule 17 (group -> block .)


state 9

    (11) if -> IF . ( logical_expression ) group
    (12) if -> IF . ( logical_expression ) group ELSE group

    (               shift and go to state 33


state 10

    (25) select_element -> ( . arithmetic_expression ) matrix_row
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 35
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 11

    (10) while -> WHILE . ( logical_expression ) group

    (               shift and go to state 43


state 12

    (8) for -> FOR . ID = range group

    ID              shift and go to state 44


state 13

    (66) assignment -> ID . assignment_operator arithmetic_expression
    (24) select_element -> ID . matrix_row
    (61) assignment_operator -> . =
    (62) assignment_operator -> . ADD
    (63) assignment_operator -> . SUBTRACT
    (64) assignment_operator -> . MULTIPLY
    (65) assignment_operator -> . DIVIDE
    (30) matrix_row -> . [ vector ]

    =               shift and go to state 47
    ADD             shift and go to state 48
    SUBTRACT        shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    [               shift and go to state 52

    assignment_operator            shift and go to state 45
    matrix_row                     shift and go to state 46

state 14

    (5) line -> expression . ;

    ;               shift and go to state 53


state 15

    (6) line -> ; .

    IF              reduce using rule 6 (line -> ; .)
    WHILE           reduce using rule 6 (line -> ; .)
    FOR             reduce using rule 6 (line -> ; .)
    ;               reduce using rule 6 (line -> ; .)
    {               reduce using rule 6 (line -> ; .)
    BREAK           reduce using rule 6 (line -> ; .)
    CONT            reduce using rule 6 (line -> ; .)
    ID              reduce using rule 6 (line -> ; .)
    PRINT           reduce using rule 6 (line -> ; .)
    RETURN          reduce using rule 6 (line -> ; .)
    (               reduce using rule 6 (line -> ; .)
    [               reduce using rule 6 (line -> ; .)
    EYE             reduce using rule 6 (line -> ; .)
    ONES            reduce using rule 6 (line -> ; .)
    ZEROS           reduce using rule 6 (line -> ; .)
    $end            reduce using rule 6 (line -> ; .)
    }               reduce using rule 6 (line -> ; .)
    ELSE            reduce using rule 6 (line -> ; .)


state 16

    (7) block -> { . segment }
    (3) segment -> . group segment
    (4) segment -> . group
    (13) group -> . if
    (14) group -> . while
    (15) group -> . for
    (16) group -> . line
    (17) group -> . block
    (11) if -> . IF ( logical_expression ) group
    (12) if -> . IF ( logical_expression ) group ELSE group
    (10) while -> . WHILE ( logical_expression ) group
    (8) for -> . FOR ID = range group
    (5) line -> . expression ;
    (6) line -> . ;
    (7) block -> . { segment }
    (49) expression -> . assignment
    (50) expression -> . print
    (51) expression -> . return
    (52) expression -> . BREAK
    (53) expression -> . CONT
    (66) assignment -> . ID assignment_operator arithmetic_expression
    (67) assignment -> . select_element assignment_operator arithmetic_expression
    (68) assignment -> . select_element assignment_operator matrix_row
    (69) print -> . PRINT vector
    (70) return -> . RETURN arithmetic_expression
    (71) return -> . RETURN
    (23) select_element -> . matrix_definition matrix_row
    (24) select_element -> . ID matrix_row
    (25) select_element -> . ( arithmetic_expression ) matrix_row
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ;               shift and go to state 15
    {               shift and go to state 16
    BREAK           shift and go to state 20
    CONT            shift and go to state 21
    ID              shift and go to state 13
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    (               shift and go to state 10
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    segment                        shift and go to state 54
    group                          shift and go to state 3
    if                             shift and go to state 4
    while                          shift and go to state 5
    for                            shift and go to state 6
    line                           shift and go to state 7
    block                          shift and go to state 8
    expression                     shift and go to state 14
    assignment                     shift and go to state 17
    print                          shift and go to state 18
    return                         shift and go to state 19
    select_element                 shift and go to state 22
    matrix_definition              shift and go to state 25
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 17

    (49) expression -> assignment .

    ;               reduce using rule 49 (expression -> assignment .)


state 18

    (50) expression -> print .

    ;               reduce using rule 50 (expression -> print .)


state 19

    (51) expression -> return .

    ;               reduce using rule 51 (expression -> return .)


state 20

    (52) expression -> BREAK .

    ;               reduce using rule 52 (expression -> BREAK .)


state 21

    (53) expression -> CONT .

    ;               reduce using rule 53 (expression -> CONT .)


state 22

    (67) assignment -> select_element . assignment_operator arithmetic_expression
    (68) assignment -> select_element . assignment_operator matrix_row
    (61) assignment_operator -> . =
    (62) assignment_operator -> . ADD
    (63) assignment_operator -> . SUBTRACT
    (64) assignment_operator -> . MULTIPLY
    (65) assignment_operator -> . DIVIDE

    =               shift and go to state 47
    ADD             shift and go to state 48
    SUBTRACT        shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51

    assignment_operator            shift and go to state 55

state 23

    (69) print -> PRINT . vector
    (31) vector -> . arithmetic_expression , vector
    (32) vector -> . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    vector                         shift and go to state 56
    arithmetic_expression          shift and go to state 57
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 24

    (70) return -> RETURN . arithmetic_expression
    (71) return -> RETURN .
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    ;               reduce using rule 71 (return -> RETURN .)
    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 58
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 25

    (23) select_element -> matrix_definition . matrix_row
    (30) matrix_row -> . [ vector ]

    [               shift and go to state 52

    matrix_row                     shift and go to state 59

state 26

    (26) matrix_definition -> [ . matrix_definition_inside ]
    (28) matrix_definition_inside -> . matrix_row , matrix_definition_inside
    (29) matrix_definition_inside -> . matrix_row
    (30) matrix_row -> . [ vector ]

    [               shift and go to state 52

    matrix_definition_inside       shift and go to state 60
    matrix_row                     shift and go to state 61

state 27

    (27) matrix_definition -> matrix_gen_func .

    [               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    )               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    +               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    -               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    *               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    /               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    MTX_SUM         reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    MTX_DIFFERENCE  reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    MTX_PRODUCT     reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    MTX_QUOTIENT    reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    TRANSPOSE       reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    ,               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    ;               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    <               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    >               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    EQUAL           reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    NOT_EQUAL       reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    SMALLER_OR_EQUAL reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    LARGER_OR_EQUAL reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    ]               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    :               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    IF              reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    WHILE           reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    FOR             reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    {               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    BREAK           reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    CONT            reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    ID              reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    PRINT           reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    RETURN          reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    (               reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    EYE             reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    ONES            reduce using rule 27 (matrix_definition -> matrix_gen_func .)
    ZEROS           reduce using rule 27 (matrix_definition -> matrix_gen_func .)


state 28

    (33) matrix_gen_func -> func_name . ( arithmetic_expression )

    (               shift and go to state 62


state 29

    (34) func_name -> EYE .

    (               reduce using rule 34 (func_name -> EYE .)


state 30

    (35) func_name -> ONES .

    (               reduce using rule 35 (func_name -> ONES .)


state 31

    (36) func_name -> ZEROS .

    (               reduce using rule 36 (func_name -> ZEROS .)


state 32

    (3) segment -> group segment .

    $end            reduce using rule 3 (segment -> group segment .)
    }               reduce using rule 3 (segment -> group segment .)


state 33

    (11) if -> IF ( . logical_expression ) group
    (12) if -> IF ( . logical_expression ) group ELSE group
    (54) logical_expression -> . arithmetic_expression comparison_operator arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    logical_expression             shift and go to state 63
    arithmetic_expression          shift and go to state 64
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 34

    (48) arithmetic_expression -> ( . arithmetic_expression )
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 65
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 35

    (25) select_element -> ( arithmetic_expression . ) matrix_row
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               shift and go to state 66
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 36

    (47) arithmetic_expression -> - . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 76
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 37

    (45) arithmetic_expression -> single_value .

    )               reduce using rule 45 (arithmetic_expression -> single_value .)
    +               reduce using rule 45 (arithmetic_expression -> single_value .)
    -               reduce using rule 45 (arithmetic_expression -> single_value .)
    *               reduce using rule 45 (arithmetic_expression -> single_value .)
    /               reduce using rule 45 (arithmetic_expression -> single_value .)
    MTX_SUM         reduce using rule 45 (arithmetic_expression -> single_value .)
    MTX_DIFFERENCE  reduce using rule 45 (arithmetic_expression -> single_value .)
    MTX_PRODUCT     reduce using rule 45 (arithmetic_expression -> single_value .)
    MTX_QUOTIENT    reduce using rule 45 (arithmetic_expression -> single_value .)
    TRANSPOSE       reduce using rule 45 (arithmetic_expression -> single_value .)
    ,               reduce using rule 45 (arithmetic_expression -> single_value .)
    ;               reduce using rule 45 (arithmetic_expression -> single_value .)
    <               reduce using rule 45 (arithmetic_expression -> single_value .)
    >               reduce using rule 45 (arithmetic_expression -> single_value .)
    EQUAL           reduce using rule 45 (arithmetic_expression -> single_value .)
    NOT_EQUAL       reduce using rule 45 (arithmetic_expression -> single_value .)
    SMALLER_OR_EQUAL reduce using rule 45 (arithmetic_expression -> single_value .)
    LARGER_OR_EQUAL reduce using rule 45 (arithmetic_expression -> single_value .)
    ]               reduce using rule 45 (arithmetic_expression -> single_value .)
    :               reduce using rule 45 (arithmetic_expression -> single_value .)
    IF              reduce using rule 45 (arithmetic_expression -> single_value .)
    WHILE           reduce using rule 45 (arithmetic_expression -> single_value .)
    FOR             reduce using rule 45 (arithmetic_expression -> single_value .)
    {               reduce using rule 45 (arithmetic_expression -> single_value .)
    BREAK           reduce using rule 45 (arithmetic_expression -> single_value .)
    CONT            reduce using rule 45 (arithmetic_expression -> single_value .)
    ID              reduce using rule 45 (arithmetic_expression -> single_value .)
    PRINT           reduce using rule 45 (arithmetic_expression -> single_value .)
    RETURN          reduce using rule 45 (arithmetic_expression -> single_value .)
    (               reduce using rule 45 (arithmetic_expression -> single_value .)
    [               reduce using rule 45 (arithmetic_expression -> single_value .)
    EYE             reduce using rule 45 (arithmetic_expression -> single_value .)
    ONES            reduce using rule 45 (arithmetic_expression -> single_value .)
    ZEROS           reduce using rule 45 (arithmetic_expression -> single_value .)


state 38

    (18) single_value -> ID .

    )               reduce using rule 18 (single_value -> ID .)
    +               reduce using rule 18 (single_value -> ID .)
    -               reduce using rule 18 (single_value -> ID .)
    *               reduce using rule 18 (single_value -> ID .)
    /               reduce using rule 18 (single_value -> ID .)
    MTX_SUM         reduce using rule 18 (single_value -> ID .)
    MTX_DIFFERENCE  reduce using rule 18 (single_value -> ID .)
    MTX_PRODUCT     reduce using rule 18 (single_value -> ID .)
    MTX_QUOTIENT    reduce using rule 18 (single_value -> ID .)
    TRANSPOSE       reduce using rule 18 (single_value -> ID .)
    ,               reduce using rule 18 (single_value -> ID .)
    ;               reduce using rule 18 (single_value -> ID .)
    <               reduce using rule 18 (single_value -> ID .)
    >               reduce using rule 18 (single_value -> ID .)
    EQUAL           reduce using rule 18 (single_value -> ID .)
    NOT_EQUAL       reduce using rule 18 (single_value -> ID .)
    SMALLER_OR_EQUAL reduce using rule 18 (single_value -> ID .)
    LARGER_OR_EQUAL reduce using rule 18 (single_value -> ID .)
    ]               reduce using rule 18 (single_value -> ID .)
    :               reduce using rule 18 (single_value -> ID .)
    IF              reduce using rule 18 (single_value -> ID .)
    WHILE           reduce using rule 18 (single_value -> ID .)
    FOR             reduce using rule 18 (single_value -> ID .)
    {               reduce using rule 18 (single_value -> ID .)
    BREAK           reduce using rule 18 (single_value -> ID .)
    CONT            reduce using rule 18 (single_value -> ID .)
    ID              reduce using rule 18 (single_value -> ID .)
    PRINT           reduce using rule 18 (single_value -> ID .)
    RETURN          reduce using rule 18 (single_value -> ID .)
    (               reduce using rule 18 (single_value -> ID .)
    [               reduce using rule 18 (single_value -> ID .)
    EYE             reduce using rule 18 (single_value -> ID .)
    ONES            reduce using rule 18 (single_value -> ID .)
    ZEROS           reduce using rule 18 (single_value -> ID .)


state 39

    (19) single_value -> FLOAT .

    )               reduce using rule 19 (single_value -> FLOAT .)
    +               reduce using rule 19 (single_value -> FLOAT .)
    -               reduce using rule 19 (single_value -> FLOAT .)
    *               reduce using rule 19 (single_value -> FLOAT .)
    /               reduce using rule 19 (single_value -> FLOAT .)
    MTX_SUM         reduce using rule 19 (single_value -> FLOAT .)
    MTX_DIFFERENCE  reduce using rule 19 (single_value -> FLOAT .)
    MTX_PRODUCT     reduce using rule 19 (single_value -> FLOAT .)
    MTX_QUOTIENT    reduce using rule 19 (single_value -> FLOAT .)
    TRANSPOSE       reduce using rule 19 (single_value -> FLOAT .)
    ,               reduce using rule 19 (single_value -> FLOAT .)
    ;               reduce using rule 19 (single_value -> FLOAT .)
    <               reduce using rule 19 (single_value -> FLOAT .)
    >               reduce using rule 19 (single_value -> FLOAT .)
    EQUAL           reduce using rule 19 (single_value -> FLOAT .)
    NOT_EQUAL       reduce using rule 19 (single_value -> FLOAT .)
    SMALLER_OR_EQUAL reduce using rule 19 (single_value -> FLOAT .)
    LARGER_OR_EQUAL reduce using rule 19 (single_value -> FLOAT .)
    ]               reduce using rule 19 (single_value -> FLOAT .)
    :               reduce using rule 19 (single_value -> FLOAT .)
    IF              reduce using rule 19 (single_value -> FLOAT .)
    WHILE           reduce using rule 19 (single_value -> FLOAT .)
    FOR             reduce using rule 19 (single_value -> FLOAT .)
    {               reduce using rule 19 (single_value -> FLOAT .)
    BREAK           reduce using rule 19 (single_value -> FLOAT .)
    CONT            reduce using rule 19 (single_value -> FLOAT .)
    ID              reduce using rule 19 (single_value -> FLOAT .)
    PRINT           reduce using rule 19 (single_value -> FLOAT .)
    RETURN          reduce using rule 19 (single_value -> FLOAT .)
    (               reduce using rule 19 (single_value -> FLOAT .)
    [               reduce using rule 19 (single_value -> FLOAT .)
    EYE             reduce using rule 19 (single_value -> FLOAT .)
    ONES            reduce using rule 19 (single_value -> FLOAT .)
    ZEROS           reduce using rule 19 (single_value -> FLOAT .)


state 40

    (20) single_value -> INT .

    )               reduce using rule 20 (single_value -> INT .)
    +               reduce using rule 20 (single_value -> INT .)
    -               reduce using rule 20 (single_value -> INT .)
    *               reduce using rule 20 (single_value -> INT .)
    /               reduce using rule 20 (single_value -> INT .)
    MTX_SUM         reduce using rule 20 (single_value -> INT .)
    MTX_DIFFERENCE  reduce using rule 20 (single_value -> INT .)
    MTX_PRODUCT     reduce using rule 20 (single_value -> INT .)
    MTX_QUOTIENT    reduce using rule 20 (single_value -> INT .)
    TRANSPOSE       reduce using rule 20 (single_value -> INT .)
    ,               reduce using rule 20 (single_value -> INT .)
    ;               reduce using rule 20 (single_value -> INT .)
    <               reduce using rule 20 (single_value -> INT .)
    >               reduce using rule 20 (single_value -> INT .)
    EQUAL           reduce using rule 20 (single_value -> INT .)
    NOT_EQUAL       reduce using rule 20 (single_value -> INT .)
    SMALLER_OR_EQUAL reduce using rule 20 (single_value -> INT .)
    LARGER_OR_EQUAL reduce using rule 20 (single_value -> INT .)
    ]               reduce using rule 20 (single_value -> INT .)
    :               reduce using rule 20 (single_value -> INT .)
    IF              reduce using rule 20 (single_value -> INT .)
    WHILE           reduce using rule 20 (single_value -> INT .)
    FOR             reduce using rule 20 (single_value -> INT .)
    {               reduce using rule 20 (single_value -> INT .)
    BREAK           reduce using rule 20 (single_value -> INT .)
    CONT            reduce using rule 20 (single_value -> INT .)
    ID              reduce using rule 20 (single_value -> INT .)
    PRINT           reduce using rule 20 (single_value -> INT .)
    RETURN          reduce using rule 20 (single_value -> INT .)
    (               reduce using rule 20 (single_value -> INT .)
    [               reduce using rule 20 (single_value -> INT .)
    EYE             reduce using rule 20 (single_value -> INT .)
    ONES            reduce using rule 20 (single_value -> INT .)
    ZEROS           reduce using rule 20 (single_value -> INT .)


state 41

    (21) single_value -> STRING .

    )               reduce using rule 21 (single_value -> STRING .)
    +               reduce using rule 21 (single_value -> STRING .)
    -               reduce using rule 21 (single_value -> STRING .)
    *               reduce using rule 21 (single_value -> STRING .)
    /               reduce using rule 21 (single_value -> STRING .)
    MTX_SUM         reduce using rule 21 (single_value -> STRING .)
    MTX_DIFFERENCE  reduce using rule 21 (single_value -> STRING .)
    MTX_PRODUCT     reduce using rule 21 (single_value -> STRING .)
    MTX_QUOTIENT    reduce using rule 21 (single_value -> STRING .)
    TRANSPOSE       reduce using rule 21 (single_value -> STRING .)
    ,               reduce using rule 21 (single_value -> STRING .)
    ;               reduce using rule 21 (single_value -> STRING .)
    <               reduce using rule 21 (single_value -> STRING .)
    >               reduce using rule 21 (single_value -> STRING .)
    EQUAL           reduce using rule 21 (single_value -> STRING .)
    NOT_EQUAL       reduce using rule 21 (single_value -> STRING .)
    SMALLER_OR_EQUAL reduce using rule 21 (single_value -> STRING .)
    LARGER_OR_EQUAL reduce using rule 21 (single_value -> STRING .)
    ]               reduce using rule 21 (single_value -> STRING .)
    :               reduce using rule 21 (single_value -> STRING .)
    IF              reduce using rule 21 (single_value -> STRING .)
    WHILE           reduce using rule 21 (single_value -> STRING .)
    FOR             reduce using rule 21 (single_value -> STRING .)
    {               reduce using rule 21 (single_value -> STRING .)
    BREAK           reduce using rule 21 (single_value -> STRING .)
    CONT            reduce using rule 21 (single_value -> STRING .)
    ID              reduce using rule 21 (single_value -> STRING .)
    PRINT           reduce using rule 21 (single_value -> STRING .)
    RETURN          reduce using rule 21 (single_value -> STRING .)
    (               reduce using rule 21 (single_value -> STRING .)
    [               reduce using rule 21 (single_value -> STRING .)
    EYE             reduce using rule 21 (single_value -> STRING .)
    ONES            reduce using rule 21 (single_value -> STRING .)
    ZEROS           reduce using rule 21 (single_value -> STRING .)


state 42

    (22) single_value -> matrix_definition .

    )               reduce using rule 22 (single_value -> matrix_definition .)
    +               reduce using rule 22 (single_value -> matrix_definition .)
    -               reduce using rule 22 (single_value -> matrix_definition .)
    *               reduce using rule 22 (single_value -> matrix_definition .)
    /               reduce using rule 22 (single_value -> matrix_definition .)
    MTX_SUM         reduce using rule 22 (single_value -> matrix_definition .)
    MTX_DIFFERENCE  reduce using rule 22 (single_value -> matrix_definition .)
    MTX_PRODUCT     reduce using rule 22 (single_value -> matrix_definition .)
    MTX_QUOTIENT    reduce using rule 22 (single_value -> matrix_definition .)
    TRANSPOSE       reduce using rule 22 (single_value -> matrix_definition .)
    ,               reduce using rule 22 (single_value -> matrix_definition .)
    ;               reduce using rule 22 (single_value -> matrix_definition .)
    <               reduce using rule 22 (single_value -> matrix_definition .)
    >               reduce using rule 22 (single_value -> matrix_definition .)
    EQUAL           reduce using rule 22 (single_value -> matrix_definition .)
    NOT_EQUAL       reduce using rule 22 (single_value -> matrix_definition .)
    SMALLER_OR_EQUAL reduce using rule 22 (single_value -> matrix_definition .)
    LARGER_OR_EQUAL reduce using rule 22 (single_value -> matrix_definition .)
    ]               reduce using rule 22 (single_value -> matrix_definition .)
    :               reduce using rule 22 (single_value -> matrix_definition .)
    IF              reduce using rule 22 (single_value -> matrix_definition .)
    WHILE           reduce using rule 22 (single_value -> matrix_definition .)
    FOR             reduce using rule 22 (single_value -> matrix_definition .)
    {               reduce using rule 22 (single_value -> matrix_definition .)
    BREAK           reduce using rule 22 (single_value -> matrix_definition .)
    CONT            reduce using rule 22 (single_value -> matrix_definition .)
    ID              reduce using rule 22 (single_value -> matrix_definition .)
    PRINT           reduce using rule 22 (single_value -> matrix_definition .)
    RETURN          reduce using rule 22 (single_value -> matrix_definition .)
    (               reduce using rule 22 (single_value -> matrix_definition .)
    [               reduce using rule 22 (single_value -> matrix_definition .)
    EYE             reduce using rule 22 (single_value -> matrix_definition .)
    ONES            reduce using rule 22 (single_value -> matrix_definition .)
    ZEROS           reduce using rule 22 (single_value -> matrix_definition .)


state 43

    (10) while -> WHILE ( . logical_expression ) group
    (54) logical_expression -> . arithmetic_expression comparison_operator arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    logical_expression             shift and go to state 77
    arithmetic_expression          shift and go to state 64
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 44

    (8) for -> FOR ID . = range group

    =               shift and go to state 78


state 45

    (66) assignment -> ID assignment_operator . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 79
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 46

    (24) select_element -> ID matrix_row .

    =               reduce using rule 24 (select_element -> ID matrix_row .)
    ADD             reduce using rule 24 (select_element -> ID matrix_row .)
    SUBTRACT        reduce using rule 24 (select_element -> ID matrix_row .)
    MULTIPLY        reduce using rule 24 (select_element -> ID matrix_row .)
    DIVIDE          reduce using rule 24 (select_element -> ID matrix_row .)


state 47

    (61) assignment_operator -> = .

    -               reduce using rule 61 (assignment_operator -> = .)
    (               reduce using rule 61 (assignment_operator -> = .)
    ID              reduce using rule 61 (assignment_operator -> = .)
    FLOAT           reduce using rule 61 (assignment_operator -> = .)
    INT             reduce using rule 61 (assignment_operator -> = .)
    STRING          reduce using rule 61 (assignment_operator -> = .)
    [               reduce using rule 61 (assignment_operator -> = .)
    EYE             reduce using rule 61 (assignment_operator -> = .)
    ONES            reduce using rule 61 (assignment_operator -> = .)
    ZEROS           reduce using rule 61 (assignment_operator -> = .)


state 48

    (62) assignment_operator -> ADD .

    -               reduce using rule 62 (assignment_operator -> ADD .)
    (               reduce using rule 62 (assignment_operator -> ADD .)
    ID              reduce using rule 62 (assignment_operator -> ADD .)
    FLOAT           reduce using rule 62 (assignment_operator -> ADD .)
    INT             reduce using rule 62 (assignment_operator -> ADD .)
    STRING          reduce using rule 62 (assignment_operator -> ADD .)
    [               reduce using rule 62 (assignment_operator -> ADD .)
    EYE             reduce using rule 62 (assignment_operator -> ADD .)
    ONES            reduce using rule 62 (assignment_operator -> ADD .)
    ZEROS           reduce using rule 62 (assignment_operator -> ADD .)


state 49

    (63) assignment_operator -> SUBTRACT .

    -               reduce using rule 63 (assignment_operator -> SUBTRACT .)
    (               reduce using rule 63 (assignment_operator -> SUBTRACT .)
    ID              reduce using rule 63 (assignment_operator -> SUBTRACT .)
    FLOAT           reduce using rule 63 (assignment_operator -> SUBTRACT .)
    INT             reduce using rule 63 (assignment_operator -> SUBTRACT .)
    STRING          reduce using rule 63 (assignment_operator -> SUBTRACT .)
    [               reduce using rule 63 (assignment_operator -> SUBTRACT .)
    EYE             reduce using rule 63 (assignment_operator -> SUBTRACT .)
    ONES            reduce using rule 63 (assignment_operator -> SUBTRACT .)
    ZEROS           reduce using rule 63 (assignment_operator -> SUBTRACT .)


state 50

    (64) assignment_operator -> MULTIPLY .

    -               reduce using rule 64 (assignment_operator -> MULTIPLY .)
    (               reduce using rule 64 (assignment_operator -> MULTIPLY .)
    ID              reduce using rule 64 (assignment_operator -> MULTIPLY .)
    FLOAT           reduce using rule 64 (assignment_operator -> MULTIPLY .)
    INT             reduce using rule 64 (assignment_operator -> MULTIPLY .)
    STRING          reduce using rule 64 (assignment_operator -> MULTIPLY .)
    [               reduce using rule 64 (assignment_operator -> MULTIPLY .)
    EYE             reduce using rule 64 (assignment_operator -> MULTIPLY .)
    ONES            reduce using rule 64 (assignment_operator -> MULTIPLY .)
    ZEROS           reduce using rule 64 (assignment_operator -> MULTIPLY .)


state 51

    (65) assignment_operator -> DIVIDE .

    -               reduce using rule 65 (assignment_operator -> DIVIDE .)
    (               reduce using rule 65 (assignment_operator -> DIVIDE .)
    ID              reduce using rule 65 (assignment_operator -> DIVIDE .)
    FLOAT           reduce using rule 65 (assignment_operator -> DIVIDE .)
    INT             reduce using rule 65 (assignment_operator -> DIVIDE .)
    STRING          reduce using rule 65 (assignment_operator -> DIVIDE .)
    [               reduce using rule 65 (assignment_operator -> DIVIDE .)
    EYE             reduce using rule 65 (assignment_operator -> DIVIDE .)
    ONES            reduce using rule 65 (assignment_operator -> DIVIDE .)
    ZEROS           reduce using rule 65 (assignment_operator -> DIVIDE .)


state 52

    (30) matrix_row -> [ . vector ]
    (31) vector -> . arithmetic_expression , vector
    (32) vector -> . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    vector                         shift and go to state 80
    arithmetic_expression          shift and go to state 57
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 53

    (5) line -> expression ; .

    IF              reduce using rule 5 (line -> expression ; .)
    WHILE           reduce using rule 5 (line -> expression ; .)
    FOR             reduce using rule 5 (line -> expression ; .)
    ;               reduce using rule 5 (line -> expression ; .)
    {               reduce using rule 5 (line -> expression ; .)
    BREAK           reduce using rule 5 (line -> expression ; .)
    CONT            reduce using rule 5 (line -> expression ; .)
    ID              reduce using rule 5 (line -> expression ; .)
    PRINT           reduce using rule 5 (line -> expression ; .)
    RETURN          reduce using rule 5 (line -> expression ; .)
    (               reduce using rule 5 (line -> expression ; .)
    [               reduce using rule 5 (line -> expression ; .)
    EYE             reduce using rule 5 (line -> expression ; .)
    ONES            reduce using rule 5 (line -> expression ; .)
    ZEROS           reduce using rule 5 (line -> expression ; .)
    $end            reduce using rule 5 (line -> expression ; .)
    }               reduce using rule 5 (line -> expression ; .)
    ELSE            reduce using rule 5 (line -> expression ; .)


state 54

    (7) block -> { segment . }

    }               shift and go to state 81


state 55

    (67) assignment -> select_element assignment_operator . arithmetic_expression
    (68) assignment -> select_element assignment_operator . matrix_row
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (30) matrix_row -> . [ vector ]
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    [               shift and go to state 84
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 82
    matrix_row                     shift and go to state 83
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 56

    (69) print -> PRINT vector .

    ;               reduce using rule 69 (print -> PRINT vector .)


state 57

    (31) vector -> arithmetic_expression . , vector
    (32) vector -> arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    ,               shift and go to state 85
    ;               reduce using rule 32 (vector -> arithmetic_expression .)
    ]               reduce using rule 32 (vector -> arithmetic_expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 58

    (70) return -> RETURN arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    ;               reduce using rule 70 (return -> RETURN arithmetic_expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 59

    (23) select_element -> matrix_definition matrix_row .

    =               reduce using rule 23 (select_element -> matrix_definition matrix_row .)
    ADD             reduce using rule 23 (select_element -> matrix_definition matrix_row .)
    SUBTRACT        reduce using rule 23 (select_element -> matrix_definition matrix_row .)
    MULTIPLY        reduce using rule 23 (select_element -> matrix_definition matrix_row .)
    DIVIDE          reduce using rule 23 (select_element -> matrix_definition matrix_row .)


state 60

    (26) matrix_definition -> [ matrix_definition_inside . ]

    ]               shift and go to state 86


state 61

    (28) matrix_definition_inside -> matrix_row . , matrix_definition_inside
    (29) matrix_definition_inside -> matrix_row .

    ,               shift and go to state 87
    ]               reduce using rule 29 (matrix_definition_inside -> matrix_row .)


state 62

    (33) matrix_gen_func -> func_name ( . arithmetic_expression )
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    func_name                      shift and go to state 28
    arithmetic_expression          shift and go to state 88
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27

state 63

    (11) if -> IF ( logical_expression . ) group
    (12) if -> IF ( logical_expression . ) group ELSE group

    )               shift and go to state 89


state 64

    (54) logical_expression -> arithmetic_expression . comparison_operator arithmetic_expression
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE
    (55) comparison_operator -> . <
    (56) comparison_operator -> . >
    (57) comparison_operator -> . EQUAL
    (58) comparison_operator -> . NOT_EQUAL
    (59) comparison_operator -> . SMALLER_OR_EQUAL
    (60) comparison_operator -> . LARGER_OR_EQUAL

    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75
    <               shift and go to state 91
    >               shift and go to state 92
    EQUAL           shift and go to state 93
    NOT_EQUAL       shift and go to state 94
    SMALLER_OR_EQUAL shift and go to state 95
    LARGER_OR_EQUAL shift and go to state 96

    comparison_operator            shift and go to state 90

state 65

    (48) arithmetic_expression -> ( arithmetic_expression . )
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               shift and go to state 97
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 66

    (25) select_element -> ( arithmetic_expression ) . matrix_row
    (30) matrix_row -> . [ vector ]

    [               shift and go to state 52

    matrix_row                     shift and go to state 98

state 67

    (37) arithmetic_expression -> arithmetic_expression + . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 99
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 68

    (38) arithmetic_expression -> arithmetic_expression - . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 100
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 69

    (39) arithmetic_expression -> arithmetic_expression * . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 101
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 70

    (40) arithmetic_expression -> arithmetic_expression / . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 102
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 71

    (41) arithmetic_expression -> arithmetic_expression MTX_SUM . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 103
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 72

    (42) arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 104
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 73

    (43) arithmetic_expression -> arithmetic_expression MTX_PRODUCT . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 105
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 74

    (44) arithmetic_expression -> arithmetic_expression MTX_QUOTIENT . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 106
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 75

    (46) arithmetic_expression -> arithmetic_expression TRANSPOSE .

    )               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    +               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    -               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    *               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    /               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    MTX_SUM         reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    MTX_DIFFERENCE  reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    MTX_PRODUCT     reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    MTX_QUOTIENT    reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    ,               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    ;               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    <               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    >               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    EQUAL           reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    NOT_EQUAL       reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    SMALLER_OR_EQUAL reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    LARGER_OR_EQUAL reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    ]               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    :               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    IF              reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    WHILE           reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    FOR             reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    {               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    BREAK           reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    CONT            reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    ID              reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    PRINT           reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    RETURN          reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    (               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    [               reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    EYE             reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    ONES            reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)
    ZEROS           reduce using rule 46 (arithmetic_expression -> arithmetic_expression TRANSPOSE .)


state 76

    (47) arithmetic_expression -> - arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    +               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    -               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    *               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    /               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    MTX_SUM         reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    MTX_PRODUCT     reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    MTX_QUOTIENT    reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    ,               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    ;               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    <               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    >               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    EQUAL           reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    NOT_EQUAL       reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    ]               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    :               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    IF              reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    WHILE           reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    FOR             reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    {               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    BREAK           reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    CONT            reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    ID              reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    PRINT           reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    RETURN          reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    (               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    [               reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    EYE             reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    ONES            reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    ZEROS           reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .)
    TRANSPOSE       shift and go to state 75

  ! TRANSPOSE       [ reduce using rule 47 (arithmetic_expression -> - arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]
  ! MTX_PRODUCT     [ shift and go to state 73 ]
  ! MTX_QUOTIENT    [ shift and go to state 74 ]


state 77

    (10) while -> WHILE ( logical_expression . ) group

    )               shift and go to state 107


state 78

    (8) for -> FOR ID = . range group
    (9) range -> . arithmetic_expression : arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    range                          shift and go to state 108
    arithmetic_expression          shift and go to state 109
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 79

    (66) assignment -> ID assignment_operator arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    ;               reduce using rule 66 (assignment -> ID assignment_operator arithmetic_expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 80

    (30) matrix_row -> [ vector . ]

    ]               shift and go to state 110


state 81

    (7) block -> { segment } .

    IF              reduce using rule 7 (block -> { segment } .)
    WHILE           reduce using rule 7 (block -> { segment } .)
    FOR             reduce using rule 7 (block -> { segment } .)
    ;               reduce using rule 7 (block -> { segment } .)
    {               reduce using rule 7 (block -> { segment } .)
    BREAK           reduce using rule 7 (block -> { segment } .)
    CONT            reduce using rule 7 (block -> { segment } .)
    ID              reduce using rule 7 (block -> { segment } .)
    PRINT           reduce using rule 7 (block -> { segment } .)
    RETURN          reduce using rule 7 (block -> { segment } .)
    (               reduce using rule 7 (block -> { segment } .)
    [               reduce using rule 7 (block -> { segment } .)
    EYE             reduce using rule 7 (block -> { segment } .)
    ONES            reduce using rule 7 (block -> { segment } .)
    ZEROS           reduce using rule 7 (block -> { segment } .)
    $end            reduce using rule 7 (block -> { segment } .)
    }               reduce using rule 7 (block -> { segment } .)
    ELSE            reduce using rule 7 (block -> { segment } .)


state 82

    (67) assignment -> select_element assignment_operator arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    ;               reduce using rule 67 (assignment -> select_element assignment_operator arithmetic_expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 83

    (68) assignment -> select_element assignment_operator matrix_row .

    ;               reduce using rule 68 (assignment -> select_element assignment_operator matrix_row .)


state 84

    (30) matrix_row -> [ . vector ]
    (26) matrix_definition -> [ . matrix_definition_inside ]
    (31) vector -> . arithmetic_expression , vector
    (32) vector -> . arithmetic_expression
    (28) matrix_definition_inside -> . matrix_row , matrix_definition_inside
    (29) matrix_definition_inside -> . matrix_row
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (30) matrix_row -> . [ vector ]
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    [               shift and go to state 84
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    vector                         shift and go to state 80
    matrix_definition_inside       shift and go to state 60
    arithmetic_expression          shift and go to state 57
    matrix_row                     shift and go to state 61
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 85

    (31) vector -> arithmetic_expression , . vector
    (31) vector -> . arithmetic_expression , vector
    (32) vector -> . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 57
    vector                         shift and go to state 111
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 86

    (26) matrix_definition -> [ matrix_definition_inside ] .

    [               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    )               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    +               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    -               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    *               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    /               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    MTX_SUM         reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    MTX_DIFFERENCE  reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    MTX_PRODUCT     reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    MTX_QUOTIENT    reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    TRANSPOSE       reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    ,               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    ;               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    <               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    >               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    EQUAL           reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    NOT_EQUAL       reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    SMALLER_OR_EQUAL reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    LARGER_OR_EQUAL reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    ]               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    :               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    IF              reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    WHILE           reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    FOR             reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    {               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    BREAK           reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    CONT            reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    ID              reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    PRINT           reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    RETURN          reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    (               reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    EYE             reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    ONES            reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)
    ZEROS           reduce using rule 26 (matrix_definition -> [ matrix_definition_inside ] .)


state 87

    (28) matrix_definition_inside -> matrix_row , . matrix_definition_inside
    (28) matrix_definition_inside -> . matrix_row , matrix_definition_inside
    (29) matrix_definition_inside -> . matrix_row
    (30) matrix_row -> . [ vector ]

    [               shift and go to state 52

    matrix_row                     shift and go to state 61
    matrix_definition_inside       shift and go to state 112

state 88

    (33) matrix_gen_func -> func_name ( arithmetic_expression . )
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               shift and go to state 113
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 89

    (11) if -> IF ( logical_expression ) . group
    (12) if -> IF ( logical_expression ) . group ELSE group
    (13) group -> . if
    (14) group -> . while
    (15) group -> . for
    (16) group -> . line
    (17) group -> . block
    (11) if -> . IF ( logical_expression ) group
    (12) if -> . IF ( logical_expression ) group ELSE group
    (10) while -> . WHILE ( logical_expression ) group
    (8) for -> . FOR ID = range group
    (5) line -> . expression ;
    (6) line -> . ;
    (7) block -> . { segment }
    (49) expression -> . assignment
    (50) expression -> . print
    (51) expression -> . return
    (52) expression -> . BREAK
    (53) expression -> . CONT
    (66) assignment -> . ID assignment_operator arithmetic_expression
    (67) assignment -> . select_element assignment_operator arithmetic_expression
    (68) assignment -> . select_element assignment_operator matrix_row
    (69) print -> . PRINT vector
    (70) return -> . RETURN arithmetic_expression
    (71) return -> . RETURN
    (23) select_element -> . matrix_definition matrix_row
    (24) select_element -> . ID matrix_row
    (25) select_element -> . ( arithmetic_expression ) matrix_row
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ;               shift and go to state 15
    {               shift and go to state 16
    BREAK           shift and go to state 20
    CONT            shift and go to state 21
    ID              shift and go to state 13
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    (               shift and go to state 10
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    group                          shift and go to state 114
    if                             shift and go to state 4
    while                          shift and go to state 5
    for                            shift and go to state 6
    line                           shift and go to state 7
    block                          shift and go to state 8
    expression                     shift and go to state 14
    assignment                     shift and go to state 17
    print                          shift and go to state 18
    return                         shift and go to state 19
    select_element                 shift and go to state 22
    matrix_definition              shift and go to state 25
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 90

    (54) logical_expression -> arithmetic_expression comparison_operator . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 115
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 91

    (55) comparison_operator -> < .

    -               reduce using rule 55 (comparison_operator -> < .)
    (               reduce using rule 55 (comparison_operator -> < .)
    ID              reduce using rule 55 (comparison_operator -> < .)
    FLOAT           reduce using rule 55 (comparison_operator -> < .)
    INT             reduce using rule 55 (comparison_operator -> < .)
    STRING          reduce using rule 55 (comparison_operator -> < .)
    [               reduce using rule 55 (comparison_operator -> < .)
    EYE             reduce using rule 55 (comparison_operator -> < .)
    ONES            reduce using rule 55 (comparison_operator -> < .)
    ZEROS           reduce using rule 55 (comparison_operator -> < .)


state 92

    (56) comparison_operator -> > .

    -               reduce using rule 56 (comparison_operator -> > .)
    (               reduce using rule 56 (comparison_operator -> > .)
    ID              reduce using rule 56 (comparison_operator -> > .)
    FLOAT           reduce using rule 56 (comparison_operator -> > .)
    INT             reduce using rule 56 (comparison_operator -> > .)
    STRING          reduce using rule 56 (comparison_operator -> > .)
    [               reduce using rule 56 (comparison_operator -> > .)
    EYE             reduce using rule 56 (comparison_operator -> > .)
    ONES            reduce using rule 56 (comparison_operator -> > .)
    ZEROS           reduce using rule 56 (comparison_operator -> > .)


state 93

    (57) comparison_operator -> EQUAL .

    -               reduce using rule 57 (comparison_operator -> EQUAL .)
    (               reduce using rule 57 (comparison_operator -> EQUAL .)
    ID              reduce using rule 57 (comparison_operator -> EQUAL .)
    FLOAT           reduce using rule 57 (comparison_operator -> EQUAL .)
    INT             reduce using rule 57 (comparison_operator -> EQUAL .)
    STRING          reduce using rule 57 (comparison_operator -> EQUAL .)
    [               reduce using rule 57 (comparison_operator -> EQUAL .)
    EYE             reduce using rule 57 (comparison_operator -> EQUAL .)
    ONES            reduce using rule 57 (comparison_operator -> EQUAL .)
    ZEROS           reduce using rule 57 (comparison_operator -> EQUAL .)


state 94

    (58) comparison_operator -> NOT_EQUAL .

    -               reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    (               reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    ID              reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    FLOAT           reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    INT             reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    STRING          reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    [               reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    EYE             reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    ONES            reduce using rule 58 (comparison_operator -> NOT_EQUAL .)
    ZEROS           reduce using rule 58 (comparison_operator -> NOT_EQUAL .)


state 95

    (59) comparison_operator -> SMALLER_OR_EQUAL .

    -               reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    (               reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    ID              reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    FLOAT           reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    INT             reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    STRING          reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    [               reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    EYE             reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    ONES            reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)
    ZEROS           reduce using rule 59 (comparison_operator -> SMALLER_OR_EQUAL .)


state 96

    (60) comparison_operator -> LARGER_OR_EQUAL .

    -               reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    (               reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    ID              reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    FLOAT           reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    INT             reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    STRING          reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    [               reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    EYE             reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    ONES            reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)
    ZEROS           reduce using rule 60 (comparison_operator -> LARGER_OR_EQUAL .)


state 97

    (48) arithmetic_expression -> ( arithmetic_expression ) .

    )               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    +               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    -               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    *               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    /               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    MTX_SUM         reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    MTX_DIFFERENCE  reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    MTX_PRODUCT     reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    MTX_QUOTIENT    reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    TRANSPOSE       reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    ,               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    ;               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    <               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    >               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    EQUAL           reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    NOT_EQUAL       reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    SMALLER_OR_EQUAL reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    LARGER_OR_EQUAL reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    ]               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    :               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    IF              reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    WHILE           reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    FOR             reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    {               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    BREAK           reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    CONT            reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    ID              reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    PRINT           reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    RETURN          reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    (               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    [               reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    EYE             reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    ONES            reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)
    ZEROS           reduce using rule 48 (arithmetic_expression -> ( arithmetic_expression ) .)


state 98

    (25) select_element -> ( arithmetic_expression ) matrix_row .

    =               reduce using rule 25 (select_element -> ( arithmetic_expression ) matrix_row .)
    ADD             reduce using rule 25 (select_element -> ( arithmetic_expression ) matrix_row .)
    SUBTRACT        reduce using rule 25 (select_element -> ( arithmetic_expression ) matrix_row .)
    MULTIPLY        reduce using rule 25 (select_element -> ( arithmetic_expression ) matrix_row .)
    DIVIDE          reduce using rule 25 (select_element -> ( arithmetic_expression ) matrix_row .)


state 99

    (37) arithmetic_expression -> arithmetic_expression + arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    +               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    -               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    MTX_SUM         reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ,               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ;               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    <               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    >               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    EQUAL           reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    NOT_EQUAL       reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ]               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    :               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    IF              reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    WHILE           reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    FOR             reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    {               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    BREAK           reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    CONT            reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ID              reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    PRINT           reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    RETURN          reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    (               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    [               reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    EYE             reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ONES            reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    ZEROS           reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75

  ! *               [ reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .) ]
  ! /               [ reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .) ]
  ! MTX_PRODUCT     [ reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .) ]
  ! MTX_QUOTIENT    [ reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .) ]
  ! TRANSPOSE       [ reduce using rule 37 (arithmetic_expression -> arithmetic_expression + arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]


state 100

    (38) arithmetic_expression -> arithmetic_expression - arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    +               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    -               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    MTX_SUM         reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ,               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ;               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    <               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    >               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    EQUAL           reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    NOT_EQUAL       reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ]               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    :               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    IF              reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    WHILE           reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    FOR             reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    {               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    BREAK           reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    CONT            reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ID              reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    PRINT           reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    RETURN          reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    (               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    [               reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    EYE             reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ONES            reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    ZEROS           reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75

  ! *               [ reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .) ]
  ! /               [ reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .) ]
  ! MTX_PRODUCT     [ reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .) ]
  ! MTX_QUOTIENT    [ reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .) ]
  ! TRANSPOSE       [ reduce using rule 38 (arithmetic_expression -> arithmetic_expression - arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]


state 101

    (39) arithmetic_expression -> arithmetic_expression * arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    +               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    -               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    *               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    /               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    MTX_SUM         reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    MTX_PRODUCT     reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    MTX_QUOTIENT    reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ,               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ;               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    <               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    >               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    EQUAL           reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    NOT_EQUAL       reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ]               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    :               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    IF              reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    WHILE           reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    FOR             reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    {               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    BREAK           reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    CONT            reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ID              reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    PRINT           reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    RETURN          reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    (               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    [               reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    EYE             reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ONES            reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    ZEROS           reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .)
    TRANSPOSE       shift and go to state 75

  ! TRANSPOSE       [ reduce using rule 39 (arithmetic_expression -> arithmetic_expression * arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]
  ! MTX_PRODUCT     [ shift and go to state 73 ]
  ! MTX_QUOTIENT    [ shift and go to state 74 ]


state 102

    (40) arithmetic_expression -> arithmetic_expression / arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    +               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    -               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    *               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    /               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    MTX_SUM         reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    MTX_PRODUCT     reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    MTX_QUOTIENT    reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ,               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ;               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    <               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    >               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    EQUAL           reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    NOT_EQUAL       reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ]               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    :               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    IF              reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    WHILE           reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    FOR             reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    {               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    BREAK           reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    CONT            reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ID              reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    PRINT           reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    RETURN          reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    (               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    [               reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    EYE             reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ONES            reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    ZEROS           reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .)
    TRANSPOSE       shift and go to state 75

  ! TRANSPOSE       [ reduce using rule 40 (arithmetic_expression -> arithmetic_expression / arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]
  ! MTX_PRODUCT     [ shift and go to state 73 ]
  ! MTX_QUOTIENT    [ shift and go to state 74 ]


state 103

    (41) arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    +               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    -               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    MTX_SUM         reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    ,               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    ;               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    <               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    >               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    EQUAL           reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    NOT_EQUAL       reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    ]               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    :               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    IF              reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    WHILE           reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    FOR             reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    {               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    BREAK           reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    CONT            reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    ID              reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    PRINT           reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    RETURN          reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    (               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    [               reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    EYE             reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    ONES            reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    ZEROS           reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75

  ! *               [ reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .) ]
  ! /               [ reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .) ]
  ! MTX_PRODUCT     [ reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .) ]
  ! MTX_QUOTIENT    [ reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .) ]
  ! TRANSPOSE       [ reduce using rule 41 (arithmetic_expression -> arithmetic_expression MTX_SUM arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]


state 104

    (42) arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    +               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    -               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    MTX_SUM         reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    ,               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    ;               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    <               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    >               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    EQUAL           reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    NOT_EQUAL       reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    ]               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    :               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    IF              reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    WHILE           reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    FOR             reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    {               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    BREAK           reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    CONT            reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    ID              reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    PRINT           reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    RETURN          reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    (               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    [               reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    EYE             reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    ONES            reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    ZEROS           reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75

  ! *               [ reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .) ]
  ! /               [ reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .) ]
  ! MTX_PRODUCT     [ reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .) ]
  ! MTX_QUOTIENT    [ reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .) ]
  ! TRANSPOSE       [ reduce using rule 42 (arithmetic_expression -> arithmetic_expression MTX_DIFFERENCE arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]


state 105

    (43) arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    +               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    -               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    *               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    /               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    MTX_SUM         reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    MTX_PRODUCT     reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    MTX_QUOTIENT    reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    ,               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    ;               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    <               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    >               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    EQUAL           reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    NOT_EQUAL       reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    ]               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    :               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    IF              reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    WHILE           reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    FOR             reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    {               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    BREAK           reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    CONT            reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    ID              reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    PRINT           reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    RETURN          reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    (               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    [               reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    EYE             reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    ONES            reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    ZEROS           reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .)
    TRANSPOSE       shift and go to state 75

  ! TRANSPOSE       [ reduce using rule 43 (arithmetic_expression -> arithmetic_expression MTX_PRODUCT arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]
  ! MTX_PRODUCT     [ shift and go to state 73 ]
  ! MTX_QUOTIENT    [ shift and go to state 74 ]


state 106

    (44) arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    +               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    -               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    *               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    /               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    MTX_SUM         reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    MTX_DIFFERENCE  reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    MTX_PRODUCT     reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    MTX_QUOTIENT    reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    ,               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    ;               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    <               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    >               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    EQUAL           reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    NOT_EQUAL       reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    SMALLER_OR_EQUAL reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    LARGER_OR_EQUAL reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    ]               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    :               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    IF              reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    WHILE           reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    FOR             reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    {               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    BREAK           reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    CONT            reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    ID              reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    PRINT           reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    RETURN          reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    (               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    [               reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    EYE             reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    ONES            reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    ZEROS           reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .)
    TRANSPOSE       shift and go to state 75

  ! TRANSPOSE       [ reduce using rule 44 (arithmetic_expression -> arithmetic_expression MTX_QUOTIENT arithmetic_expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MTX_SUM         [ shift and go to state 71 ]
  ! MTX_DIFFERENCE  [ shift and go to state 72 ]
  ! MTX_PRODUCT     [ shift and go to state 73 ]
  ! MTX_QUOTIENT    [ shift and go to state 74 ]


state 107

    (10) while -> WHILE ( logical_expression ) . group
    (13) group -> . if
    (14) group -> . while
    (15) group -> . for
    (16) group -> . line
    (17) group -> . block
    (11) if -> . IF ( logical_expression ) group
    (12) if -> . IF ( logical_expression ) group ELSE group
    (10) while -> . WHILE ( logical_expression ) group
    (8) for -> . FOR ID = range group
    (5) line -> . expression ;
    (6) line -> . ;
    (7) block -> . { segment }
    (49) expression -> . assignment
    (50) expression -> . print
    (51) expression -> . return
    (52) expression -> . BREAK
    (53) expression -> . CONT
    (66) assignment -> . ID assignment_operator arithmetic_expression
    (67) assignment -> . select_element assignment_operator arithmetic_expression
    (68) assignment -> . select_element assignment_operator matrix_row
    (69) print -> . PRINT vector
    (70) return -> . RETURN arithmetic_expression
    (71) return -> . RETURN
    (23) select_element -> . matrix_definition matrix_row
    (24) select_element -> . ID matrix_row
    (25) select_element -> . ( arithmetic_expression ) matrix_row
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ;               shift and go to state 15
    {               shift and go to state 16
    BREAK           shift and go to state 20
    CONT            shift and go to state 21
    ID              shift and go to state 13
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    (               shift and go to state 10
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    group                          shift and go to state 116
    if                             shift and go to state 4
    while                          shift and go to state 5
    for                            shift and go to state 6
    line                           shift and go to state 7
    block                          shift and go to state 8
    expression                     shift and go to state 14
    assignment                     shift and go to state 17
    print                          shift and go to state 18
    return                         shift and go to state 19
    select_element                 shift and go to state 22
    matrix_definition              shift and go to state 25
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 108

    (8) for -> FOR ID = range . group
    (13) group -> . if
    (14) group -> . while
    (15) group -> . for
    (16) group -> . line
    (17) group -> . block
    (11) if -> . IF ( logical_expression ) group
    (12) if -> . IF ( logical_expression ) group ELSE group
    (10) while -> . WHILE ( logical_expression ) group
    (8) for -> . FOR ID = range group
    (5) line -> . expression ;
    (6) line -> . ;
    (7) block -> . { segment }
    (49) expression -> . assignment
    (50) expression -> . print
    (51) expression -> . return
    (52) expression -> . BREAK
    (53) expression -> . CONT
    (66) assignment -> . ID assignment_operator arithmetic_expression
    (67) assignment -> . select_element assignment_operator arithmetic_expression
    (68) assignment -> . select_element assignment_operator matrix_row
    (69) print -> . PRINT vector
    (70) return -> . RETURN arithmetic_expression
    (71) return -> . RETURN
    (23) select_element -> . matrix_definition matrix_row
    (24) select_element -> . ID matrix_row
    (25) select_element -> . ( arithmetic_expression ) matrix_row
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ;               shift and go to state 15
    {               shift and go to state 16
    BREAK           shift and go to state 20
    CONT            shift and go to state 21
    ID              shift and go to state 13
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    (               shift and go to state 10
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    group                          shift and go to state 117
    if                             shift and go to state 4
    while                          shift and go to state 5
    for                            shift and go to state 6
    line                           shift and go to state 7
    block                          shift and go to state 8
    expression                     shift and go to state 14
    assignment                     shift and go to state 17
    print                          shift and go to state 18
    return                         shift and go to state 19
    select_element                 shift and go to state 22
    matrix_definition              shift and go to state 25
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 109

    (9) range -> arithmetic_expression . : arithmetic_expression
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    :               shift and go to state 118
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 110

    (30) matrix_row -> [ vector ] .

    =               reduce using rule 30 (matrix_row -> [ vector ] .)
    ADD             reduce using rule 30 (matrix_row -> [ vector ] .)
    SUBTRACT        reduce using rule 30 (matrix_row -> [ vector ] .)
    MULTIPLY        reduce using rule 30 (matrix_row -> [ vector ] .)
    DIVIDE          reduce using rule 30 (matrix_row -> [ vector ] .)
    ,               reduce using rule 30 (matrix_row -> [ vector ] .)
    ]               reduce using rule 30 (matrix_row -> [ vector ] .)
    ;               reduce using rule 30 (matrix_row -> [ vector ] .)


state 111

    (31) vector -> arithmetic_expression , vector .

    ;               reduce using rule 31 (vector -> arithmetic_expression , vector .)
    ]               reduce using rule 31 (vector -> arithmetic_expression , vector .)


state 112

    (28) matrix_definition_inside -> matrix_row , matrix_definition_inside .

    ]               reduce using rule 28 (matrix_definition_inside -> matrix_row , matrix_definition_inside .)


state 113

    (33) matrix_gen_func -> func_name ( arithmetic_expression ) .

    [               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    )               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    +               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    -               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    *               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    /               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    MTX_SUM         reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    MTX_DIFFERENCE  reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    MTX_PRODUCT     reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    MTX_QUOTIENT    reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    TRANSPOSE       reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    ,               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    ;               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    <               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    >               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    EQUAL           reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    NOT_EQUAL       reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    SMALLER_OR_EQUAL reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    LARGER_OR_EQUAL reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    ]               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    :               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    IF              reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    WHILE           reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    FOR             reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    {               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    BREAK           reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    CONT            reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    ID              reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    PRINT           reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    RETURN          reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    (               reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    EYE             reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    ONES            reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)
    ZEROS           reduce using rule 33 (matrix_gen_func -> func_name ( arithmetic_expression ) .)


state 114

    (11) if -> IF ( logical_expression ) group .
    (12) if -> IF ( logical_expression ) group . ELSE group

    IF              reduce using rule 11 (if -> IF ( logical_expression ) group .)
    WHILE           reduce using rule 11 (if -> IF ( logical_expression ) group .)
    FOR             reduce using rule 11 (if -> IF ( logical_expression ) group .)
    ;               reduce using rule 11 (if -> IF ( logical_expression ) group .)
    {               reduce using rule 11 (if -> IF ( logical_expression ) group .)
    BREAK           reduce using rule 11 (if -> IF ( logical_expression ) group .)
    CONT            reduce using rule 11 (if -> IF ( logical_expression ) group .)
    ID              reduce using rule 11 (if -> IF ( logical_expression ) group .)
    PRINT           reduce using rule 11 (if -> IF ( logical_expression ) group .)
    RETURN          reduce using rule 11 (if -> IF ( logical_expression ) group .)
    (               reduce using rule 11 (if -> IF ( logical_expression ) group .)
    [               reduce using rule 11 (if -> IF ( logical_expression ) group .)
    EYE             reduce using rule 11 (if -> IF ( logical_expression ) group .)
    ONES            reduce using rule 11 (if -> IF ( logical_expression ) group .)
    ZEROS           reduce using rule 11 (if -> IF ( logical_expression ) group .)
    $end            reduce using rule 11 (if -> IF ( logical_expression ) group .)
    }               reduce using rule 11 (if -> IF ( logical_expression ) group .)
    ELSE            shift and go to state 119

  ! ELSE            [ reduce using rule 11 (if -> IF ( logical_expression ) group .) ]


state 115

    (54) logical_expression -> arithmetic_expression comparison_operator arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    )               reduce using rule 54 (logical_expression -> arithmetic_expression comparison_operator arithmetic_expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 116

    (10) while -> WHILE ( logical_expression ) group .

    IF              reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    WHILE           reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    FOR             reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    ;               reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    {               reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    BREAK           reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    CONT            reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    ID              reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    PRINT           reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    RETURN          reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    (               reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    [               reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    EYE             reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    ONES            reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    ZEROS           reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    $end            reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    }               reduce using rule 10 (while -> WHILE ( logical_expression ) group .)
    ELSE            reduce using rule 10 (while -> WHILE ( logical_expression ) group .)


state 117

    (8) for -> FOR ID = range group .

    IF              reduce using rule 8 (for -> FOR ID = range group .)
    WHILE           reduce using rule 8 (for -> FOR ID = range group .)
    FOR             reduce using rule 8 (for -> FOR ID = range group .)
    ;               reduce using rule 8 (for -> FOR ID = range group .)
    {               reduce using rule 8 (for -> FOR ID = range group .)
    BREAK           reduce using rule 8 (for -> FOR ID = range group .)
    CONT            reduce using rule 8 (for -> FOR ID = range group .)
    ID              reduce using rule 8 (for -> FOR ID = range group .)
    PRINT           reduce using rule 8 (for -> FOR ID = range group .)
    RETURN          reduce using rule 8 (for -> FOR ID = range group .)
    (               reduce using rule 8 (for -> FOR ID = range group .)
    [               reduce using rule 8 (for -> FOR ID = range group .)
    EYE             reduce using rule 8 (for -> FOR ID = range group .)
    ONES            reduce using rule 8 (for -> FOR ID = range group .)
    ZEROS           reduce using rule 8 (for -> FOR ID = range group .)
    $end            reduce using rule 8 (for -> FOR ID = range group .)
    }               reduce using rule 8 (for -> FOR ID = range group .)
    ELSE            reduce using rule 8 (for -> FOR ID = range group .)


state 118

    (9) range -> arithmetic_expression : . arithmetic_expression
    (37) arithmetic_expression -> . arithmetic_expression + arithmetic_expression
    (38) arithmetic_expression -> . arithmetic_expression - arithmetic_expression
    (39) arithmetic_expression -> . arithmetic_expression * arithmetic_expression
    (40) arithmetic_expression -> . arithmetic_expression / arithmetic_expression
    (41) arithmetic_expression -> . arithmetic_expression MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> . arithmetic_expression MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> . arithmetic_expression MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression MTX_QUOTIENT arithmetic_expression
    (45) arithmetic_expression -> . single_value
    (46) arithmetic_expression -> . arithmetic_expression TRANSPOSE
    (47) arithmetic_expression -> . - arithmetic_expression
    (48) arithmetic_expression -> . ( arithmetic_expression )
    (18) single_value -> . ID
    (19) single_value -> . FLOAT
    (20) single_value -> . INT
    (21) single_value -> . STRING
    (22) single_value -> . matrix_definition
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    -               shift and go to state 36
    (               shift and go to state 34
    ID              shift and go to state 38
    FLOAT           shift and go to state 39
    INT             shift and go to state 40
    STRING          shift and go to state 41
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    arithmetic_expression          shift and go to state 120
    single_value                   shift and go to state 37
    matrix_definition              shift and go to state 42
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 119

    (12) if -> IF ( logical_expression ) group ELSE . group
    (13) group -> . if
    (14) group -> . while
    (15) group -> . for
    (16) group -> . line
    (17) group -> . block
    (11) if -> . IF ( logical_expression ) group
    (12) if -> . IF ( logical_expression ) group ELSE group
    (10) while -> . WHILE ( logical_expression ) group
    (8) for -> . FOR ID = range group
    (5) line -> . expression ;
    (6) line -> . ;
    (7) block -> . { segment }
    (49) expression -> . assignment
    (50) expression -> . print
    (51) expression -> . return
    (52) expression -> . BREAK
    (53) expression -> . CONT
    (66) assignment -> . ID assignment_operator arithmetic_expression
    (67) assignment -> . select_element assignment_operator arithmetic_expression
    (68) assignment -> . select_element assignment_operator matrix_row
    (69) print -> . PRINT vector
    (70) return -> . RETURN arithmetic_expression
    (71) return -> . RETURN
    (23) select_element -> . matrix_definition matrix_row
    (24) select_element -> . ID matrix_row
    (25) select_element -> . ( arithmetic_expression ) matrix_row
    (26) matrix_definition -> . [ matrix_definition_inside ]
    (27) matrix_definition -> . matrix_gen_func
    (33) matrix_gen_func -> . func_name ( arithmetic_expression )
    (34) func_name -> . EYE
    (35) func_name -> . ONES
    (36) func_name -> . ZEROS

    IF              shift and go to state 9
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ;               shift and go to state 15
    {               shift and go to state 16
    BREAK           shift and go to state 20
    CONT            shift and go to state 21
    ID              shift and go to state 13
    PRINT           shift and go to state 23
    RETURN          shift and go to state 24
    (               shift and go to state 10
    [               shift and go to state 26
    EYE             shift and go to state 29
    ONES            shift and go to state 30
    ZEROS           shift and go to state 31

    group                          shift and go to state 121
    if                             shift and go to state 4
    while                          shift and go to state 5
    for                            shift and go to state 6
    line                           shift and go to state 7
    block                          shift and go to state 8
    expression                     shift and go to state 14
    assignment                     shift and go to state 17
    print                          shift and go to state 18
    return                         shift and go to state 19
    select_element                 shift and go to state 22
    matrix_definition              shift and go to state 25
    matrix_gen_func                shift and go to state 27
    func_name                      shift and go to state 28

state 120

    (9) range -> arithmetic_expression : arithmetic_expression .
    (37) arithmetic_expression -> arithmetic_expression . + arithmetic_expression
    (38) arithmetic_expression -> arithmetic_expression . - arithmetic_expression
    (39) arithmetic_expression -> arithmetic_expression . * arithmetic_expression
    (40) arithmetic_expression -> arithmetic_expression . / arithmetic_expression
    (41) arithmetic_expression -> arithmetic_expression . MTX_SUM arithmetic_expression
    (42) arithmetic_expression -> arithmetic_expression . MTX_DIFFERENCE arithmetic_expression
    (43) arithmetic_expression -> arithmetic_expression . MTX_PRODUCT arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . MTX_QUOTIENT arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TRANSPOSE

    IF              reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    WHILE           reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    FOR             reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    ;               reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    {               reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    BREAK           reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    CONT            reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    ID              reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    PRINT           reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    RETURN          reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    (               reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    [               reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    EYE             reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    ONES            reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    ZEROS           reduce using rule 9 (range -> arithmetic_expression : arithmetic_expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MTX_SUM         shift and go to state 71
    MTX_DIFFERENCE  shift and go to state 72
    MTX_PRODUCT     shift and go to state 73
    MTX_QUOTIENT    shift and go to state 74
    TRANSPOSE       shift and go to state 75


state 121

    (12) if -> IF ( logical_expression ) group ELSE group .

    IF              reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    WHILE           reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    FOR             reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    ;               reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    {               reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    BREAK           reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    CONT            reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    ID              reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    PRINT           reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    RETURN          reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    (               reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    [               reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    EYE             reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    ONES            reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    ZEROS           reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    $end            reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    }               reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)
    ELSE            reduce using rule 12 (if -> IF ( logical_expression ) group ELSE group .)

